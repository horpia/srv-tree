{"version":3,"sources":["models/items/abstract-tree-node.ts","models/items/service.ts","components/connector/index.tsx","models/items/virtual-machine.ts","models/items/server.ts","models/items/data-center.ts","models/data-loader.ts","components/svg-icon/icons.svg","components/svg-icon/elasticsearch.svg","components/svg-icon/apache.svg","components/svg-icon/mssql.svg","components/svg-icon/db2.svg","components/svg-icon/ruby.svg","components/svg-icon/index.tsx","components/filter-bar/context.tsx","components/arrow-button/index.tsx","components/node-label/index.tsx","components/infra-tree-node/index.tsx","components/service/index.tsx","components/virtual-machine/index.tsx","components/property/index.tsx","components/server/index.tsx","components/data-center/index.tsx","components/infra-tree/infra-tree.tsx","components/filter-bar/index.tsx","components/app.tsx","index.tsx"],"names":["AbstractTreeNode","el","name","desc","id","searchStringCache","this","getAttribute","querySelector","textContent","sequence","selector","list","querySelectorAll","forEach","push","trim","getTextToSearch","toLowerCase","split","filter","v","i","arr","indexOf","join","replace","trimEnd","ConnectionType","Service","type","globalAddr","localAddr","port","parseInt","getElementsTextBySelector","VirtualMachine","ip","services","map","vm","toSearchString","Server","cpu","ram","disk","os","vms","DataCenter","servers","srv","DataLoader","data","dataCenters","url","fetch","cache","text","xml","DOMParser","parseFromString","urlParts","pop","relUrl","loaders","Promise","resolve","a","parentElement","firstElementChild","replaceChild","all","splice","length","ConnectorView","props","className","caption","wrapArray","lines","toString","supportedIcons","imgFiles","elasticSearchIcon","apacheIcon","mssqlIcon","db2Icon","rubyIcon","SvgIcon","includes","src","alt","xmlns","xmlnsXlink","href","icons","FilterContextCollapseToType","ArrowButton","hidden","isOpen","defaultContext","collapseTo","NONE","setCollapseTo","FilterContext","React","createContext","FilterContextProvider","useState","value","Provider","children","NodeLabel","context","useContext","showInfo","setShowInfo","classes","isEmpty","style","maxLines","onClick","setOpenState","icon","TreeNode","data-search","searchText","ServiceView","isRoot","ROOT_SERVICE","SERVICE","Math","max","model","VirtualMachineView","VIRTUAL_MACHINE","service","VM","PropertiesGroup","Property","ServerView","SERVER","LAN","DataCenterView","DATA_CENTER","vmsCount","server","WAN","InfraTree","setDataCenters","useEffect","loadByUrl","then","loader","dcs","dataCenter","hiddenNodesCount","FilterBar","inputEl","htmlFor","ref","autoComplete","onKeyUp","event","setHiddenNodesCount","filterNodesByText","placeholder","search","allEls","document","hiddenNodes","htmlEl","dataset","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.05d2ecdc.chunk.js","sourcesContent":["export abstract class AbstractTreeNode {\n\treadonly name: string;\n\treadonly desc: string;\n\n\tprotected el: Element;\n\n\tprivate static sequence: number = 0;\n\tprivate readonly id: string;\n\tprivate searchStringCache: string = '';\n\n\tprotected constructor(el: Element) {\n\t\tthis.el = el;\n\t\tthis.name = el.getAttribute('name') || '';\n\t\tthis.desc = el.querySelector(':scope > desc')?.textContent || '';\n\t\tthis.id = new.target.name + ':' + this.name + '@' + (++AbstractTreeNode.sequence);\n\t}\n\n\tprotected abstract getTextToSearch(): string;\n\n\tprotected getElementsTextBySelector(selector: string): string[] {\n\t\tconst list: string[] = [];\n\t\tthis.el.querySelectorAll(selector).forEach(el => {\n\t\t\tlist.push((el?.textContent || '').trim());\n\t\t});\n\n\t\treturn list;\n\t}\n\n\ttoSearchString(): string {\n\t\tif (this.searchStringCache !== '') {\n\t\t\treturn this.searchStringCache;\n\t\t}\n\n\t\tthis.searchStringCache = this.name + ' ' + this.desc + ' ' + this.getTextToSearch();\n\t\tthis.searchStringCache = this.searchStringCache.toLowerCase().split(' ')\n\t\t\t.filter((v: string, i: number, arr: string[]) => {\n\t\t\t\treturn i === arr.indexOf(v);\n\t\t\t})\n\t\t\t.join(' ')\n\t\t\t.replace(/\\s+/g, ' ')\n\t\t\t.trimEnd();\n\n\t\treturn this.searchStringCache;\n\t}\n\n\ttoString(): string {\n\t\treturn this.id;\n\t}\n}","import {AbstractTreeNode} from \"./abstract-tree-node\";\n\nexport class Service extends AbstractTreeNode {\n\treadonly type: string;\n\treadonly globalAddr: string[] = [];\n\treadonly localAddr: string[] = [];\n\treadonly port: number;\n\n\tconstructor(el: Element) {\n\t\tsuper(el);\n\t\tthis.type = el.getAttribute('type') || 'service';\n\t\tthis.port = parseInt(el.getAttribute('port') || '0', 10);\n\n\t\tthis.globalAddr = this.getElementsTextBySelector(':scope > global-addr');\n\t\tthis.localAddr = this.getElementsTextBySelector(':scope > local-addr');\n\t}\n\n\tprotected getTextToSearch(): string {\n\t\treturn this.type\n\t\t\t+ ' ' + this.localAddr.join(',')\n\t\t\t+ ' ' + this.globalAddr.join(',')\n\t\t\t+ ' ' + this.port;\n\t}\n}","import React from \"react\";\nimport \"./style.scss\";\n\nexport enum ConnectionType {\n\tLAN = 'lan',\n\tWAN = 'wan',\n\tVM = 'vm',\n\tROOT_SERVICE = 'root-service',\n\tSERVICE = 'service',\n}\n\ntype ConnectorViewType = {\n\ttype: ConnectionType,\n\tcaption?: string,\n\tip?: string[],\n\tlocalAddr?: string[],\n\tglobalAddr?: string[]\n}\n\nexport function ConnectorView(props: ConnectorViewType): JSX.Element {\n\treturn (\n\t\t<div className={'connector connector_' + props.type}>\n\t\t\t<div className=\"connector__v-line\"/>\n\t\t\t<div className=\"connector__connection\">\n\t\t\t\t<div className=\"connector__point\"/>\n\t\t\t\t<div className=\"connector__h-line\">\n\t\t\t\t\t<div className=\"connector__caption\">{props.caption || wrapArray(props.ip || [])}</div>\n\t\t\t\t</div>\n\t\t\t\t{props.globalAddr && props.globalAddr.length > 0\n\t\t\t\t\t?\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div className=\"connector__wan-point\"/>\n\t\t\t\t\t\t<div className=\"connector__wan-line\">\n\t\t\t\t\t\t\t<div className=\"connector__wan-caption\">{wrapArray(props.globalAddr || [])}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t\t: null\n\t\t\t\t}\n\t\t\t\t{props.localAddr && props.localAddr.length > 0\n\t\t\t\t\t?\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div className=\"connector__lan-point\"/>\n\t\t\t\t\t\t<div className=\"connector__lan-line\">\n\t\t\t\t\t\t\t<div className=\"connector__lan-caption\">{wrapArray(props.localAddr || [])}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t\t: null\n\t\t\t\t}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nfunction wrapArray(lines: string[]): React.ReactNode {\n\treturn lines.map((v: string, i: number) => <div key={i.toString()}>{v}</div>);\n}","import {Service} from \"./service\";\nimport {AbstractTreeNode} from \"./abstract-tree-node\";\n\nexport class VirtualMachine extends AbstractTreeNode {\n\treadonly ip: string[] = [];\n\treadonly globalAddr: string[] = [];\n\treadonly localAddr: string[] = [];\n\treadonly services: Service[];\n\n\tconstructor(el: Element) {\n\t\tsuper(el);\n\t\tthis.ip = this.getElementsTextBySelector(':scope > ip');\n\t\tthis.globalAddr = this.getElementsTextBySelector(':scope > global-addr');\n\t\tthis.localAddr = this.getElementsTextBySelector(':scope > local-addr');\n\t\tthis.services = [];\n\n\t\tel.querySelectorAll(':scope > service').forEach(el => {\n\t\t\tthis.services.push(new Service(el));\n\t\t});\n\t}\n\n\tprotected getTextToSearch(): string {\n\t\treturn this.ip.join(',')\n\t\t\t+ ' ' + this.localAddr.join(',')\n\t\t\t+ ' ' + this.globalAddr.join(',')\n\t\t\t+ ' ' + this.services.map(vm => vm.toSearchString()).join(' ');\n\t}\n}","import {VirtualMachine} from \"./virtual-machine\";\nimport {Service} from \"./service\";\nimport {AbstractTreeNode} from \"./abstract-tree-node\";\n\nexport class Server extends AbstractTreeNode {\n\treadonly ip: string[] = [];\n\treadonly globalAddr: string[] = [];\n\treadonly localAddr: string[] = [];\n\treadonly cpu: string;\n\treadonly ram: string;\n\treadonly disk: string;\n\treadonly os: string;\n\treadonly vms: VirtualMachine[] = [];\n\treadonly services: Service[] = [];\n\n\tconstructor(el: Element) {\n\t\tsuper(el);\n\t\tthis.ip = this.getElementsTextBySelector(':scope > ip');\n\t\tthis.globalAddr = this.getElementsTextBySelector(':scope > global-addr');\n\t\tthis.localAddr = this.getElementsTextBySelector(':scope > local-addr');\n\n\t\tthis.cpu = el.querySelector(':scope > cpu')?.textContent || '';\n\t\tthis.ram = el.querySelector(':scope > ram')?.textContent || '';\n\t\tthis.disk = el.querySelector(':scope > disk')?.textContent || '';\n\t\tthis.os = el.querySelector(':scope > os')?.textContent || '';\n\n\t\tel.querySelectorAll(':scope > vm').forEach(el => {\n\t\t\tthis.vms.push(new VirtualMachine(el));\n\t\t});\n\n\t\tel.querySelectorAll(':scope > service').forEach(el => {\n\t\t\tthis.services.push(new Service(el));\n\t\t});\n\t}\n\n\tprotected getTextToSearch(): string {\n\t\treturn this.ip.join(',')\n\t\t\t+ ' ' + this.localAddr.join(',')\n\t\t\t+ ' ' + this.globalAddr.join(',')\n\t\t\t+ ' ' + this.cpu\n\t\t\t+ ' ' + this.os\n\t\t\t+ ' ' + this.vms.map(vm => vm.toSearchString()).join(' ')\n\t\t\t+ ' ' + this.services.map(vm => vm.toSearchString()).join(' ');\n\t}\n}","import {Server} from \"./server\";\nimport {AbstractTreeNode} from \"./abstract-tree-node\";\n\nexport class DataCenter extends AbstractTreeNode {\n\treadonly servers: Server[];\n\n\tconstructor(el: Element) {\n\t\tsuper(el);\n\t\tthis.servers = [];\n\n\t\tel.querySelectorAll(':scope > srv').forEach(el => {\n\t\t\tthis.servers.push(new Server(el));\n\t\t});\n\t}\n\n\tprotected getTextToSearch(): string {\n\t\treturn this.servers.map(srv => srv.toSearchString()).join(' ');\n\t}\n}","import {DataCenter} from \"./items/data-center\";\n\nexport class DataLoader {\n\tprivate data?: XMLDocument;\n\treadonly dataCenters: DataCenter[] = [];\n\n\tasync loadByUrl(url: string): Promise<DataLoader> {\n\t\tconst xml: string = await (await fetch(url, {cache: 'no-cache'})).text();\n\t\tthis.data = new DOMParser().parseFromString(xml, 'application/xml');\n\n\t\tconst urlParts: string[] = url.split('/');\n\t\turlParts.pop();\n\t\tconst relUrl: string = urlParts.join('/');\n\t\tconst loaders: Promise<void>[] = [];\n\n\t\tthis.data.querySelectorAll('include[src]').forEach(el => {\n\t\t\tloaders.push(new Promise<void>(async resolve => {\n\t\t\t\tconst url: string = relUrl + '/' + el.getAttribute('src');\n\t\t\t\tconst xml: string = await (await fetch(url, {cache: 'no-cache'})).text();\n\t\t\t\tconst data = new DOMParser().parseFromString(xml, 'application/xml');\n\t\t\t\tif (el.parentElement && data.firstElementChild) {\n\t\t\t\t\tel.parentElement.replaceChild(data.firstElementChild, el);\n\t\t\t\t}\n\t\t\t\tresolve();\n\t\t\t}));\n\t\t});\n\n\t\tawait Promise.all(loaders);\n\n\t\tconst dataCenters: DataCenter[] = [];\n\t\tthis.data.querySelectorAll('infra > dc').forEach(el => {\n\t\t\tdataCenters.push(new DataCenter(el));\n\t\t});\n\t\tthis.dataCenters.splice(0, this.dataCenters.length, ...dataCenters);\n\t\treturn this;\n\t}\n}","export default __webpack_public_path__ + \"static/media/icons.f9e07b6a.svg\";","export default __webpack_public_path__ + \"static/media/elasticsearch.81e26c95.svg\";","export default __webpack_public_path__ + \"static/media/apache.ec3db90d.svg\";","export default __webpack_public_path__ + \"static/media/mssql.cfe2c656.svg\";","export default __webpack_public_path__ + \"static/media/db2.5d89dc76.svg\";","export default __webpack_public_path__ + \"static/media/ruby.320ed468.svg\";","import icons from \"./icons.svg\";\nimport elasticSearchIcon from \"./elasticsearch.svg\";\nimport apacheIcon from \"./apache.svg\";\nimport mssqlIcon from \"./mssql.svg\";\nimport db2Icon from \"./db2.svg\";\nimport rubyIcon from \"./ruby.svg\";\nimport \"./style.scss\";\n\nconst supportedIcons: string[] = [\n\t// Internal icons\n\t'server', 'vm', 'data-center', 'service', 'arrow', 'info', 'cancel',\n\n\t// Logo of services\n\t'php', 'php-fpm', 'nginx', 'redis', 'mysql', 'cassandra',\n\t'rabbitmq', 'sphinxsearch', 'elasticsearch', 'clickhouse',\n\t'docker', 'nodejs', 'kafka', 'cron', 'crontab', 'storage',\n\t'postgresql', 'mariadb', 'oracle', 'mongodb', 'apache', 'mssql',\n\t'db2', 'jenkins', 'consul', 'kibana', 'zabbix', 'ansible', 'graylog',\n\t'vault', 'java', 'python', 'ruby', 'perl'\n];\n\n\nconst imgFiles: Record<string, string> = {\n\t'elasticsearch': elasticSearchIcon,\n\t'apache': apacheIcon,\n\t'mssql': mssqlIcon,\n\t'db2': db2Icon,\n\t'ruby': rubyIcon,\n};\n\nexport function SvgIcon(props: {name: string, className?: string}): JSX.Element {\n\tlet name: string = props.name.toLowerCase();\n\tlet className: string = props.className || '';\n\n\tif (!supportedIcons.includes(name)) {\n\t\tname = 'service';\n\t}\n\n\tif (typeof imgFiles[name] === 'string') {\n\t\treturn (\n\t\t\t<img src={imgFiles[name]} alt=\"\" className={'icon ' + className}/>\n\t\t);\n\t}\n\n\treturn (\n\t\t<svg xmlns=\"http://www.w3.org/2000/svg\"\n\t\t     xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n\t\t     className={'icon ' + className}>\n\t\t\t<use href={`${icons}#${name}`}/>\n\t\t</svg>\n\t);\n}","import React, {useState} from \"react\";\n\nexport enum FilterContextCollapseToType {\n\tNONE,\n\tDATA_CENTER,\n\tSERVER,\n\tVIRTUAL_MACHINE,\n\tSERVICE\n}\n\nexport type FilterContextType = {\n\tcollapseTo: FilterContextCollapseToType,\n\tsetCollapseTo: (v: FilterContextCollapseToType) => void,\n};\n\nconst defaultContext: FilterContextType = {\n\tcollapseTo: FilterContextCollapseToType.NONE,\n\tsetCollapseTo: (v: FilterContextCollapseToType): void => {},\n};\n\nexport const FilterContext: React.Context<FilterContextType> = React.createContext(defaultContext);\n\nexport function FilterContextProvider(props: {children?: React.ReactNode}) {\n\tconst [collapseTo, setCollapseTo] = useState(FilterContextCollapseToType.NONE);\n\n\tconst value: FilterContextType = {\n\t\tcollapseTo,\n\t\tsetCollapseTo,\n\t};\n\n\treturn (\n\t\t<FilterContext.Provider value={value}>\n\t\t\t{props.children}\n\t\t</FilterContext.Provider>\n\t);\n}","import React from \"react\";\nimport \"./style.scss\";\nimport {SvgIcon} from \"../svg-icon\";\n\nexport function ArrowButton(props: {isOpen: boolean, hidden?: boolean}): JSX.Element {\n\treturn (\n\t\t<div className=\"arrow-button\" hidden={!!props.hidden}>\n\t\t\t<SvgIcon name=\"arrow\"\n\t\t\t         className={(props.isOpen ? 'icon_rot270' : 'icon_rot90') + ' icon_sm arrow-button__icon'}/>\n\t\t</div>\n\t);\n}","import \"./style.scss\";\nimport React, {useContext, useState} from \"react\";\nimport {SvgIcon} from \"../svg-icon\";\nimport {ArrowButton} from \"../arrow-button\";\nimport {FilterContext, FilterContextCollapseToType, FilterContextType} from \"../filter-bar/context\";\n\nexport type NodeLabelType = {\n\ticon: string,\n\tname: string,\n\tisEmpty: boolean,\n\tisOpen?: boolean,\n\tsetOpenState?: (el: any) => any,\n\tchildren?: React.ReactNode,\n\tmaxLines?: number\n}\n\nexport function NodeLabel(props: NodeLabelType): JSX.Element {\n\tconst context: FilterContextType = useContext(FilterContext);\n\tconst [showInfo, setShowInfo] = useState(false);\n\tlet classes: string[] = ['node-label'];\n\n\tif (showInfo) {\n\t\tclasses.push('node-label_show-info');\n\t}\n\n\tif (props.isEmpty) {\n\t\tclasses.push('node-label_empty');\n\t}\n\n\tconst toggleState: () => void = () => {\n\t\tif (!props.setOpenState) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (context.collapseTo !== FilterContextCollapseToType.NONE) {\n\t\t\t// сбрасываем ранее установленый флаг сворачиявания дерева до определенного уровня нод\n\t\t\tcontext.setCollapseTo(FilterContextCollapseToType.NONE);\n\t\t}\n\n\t\tprops.setOpenState(!props.isOpen);\n\t};\n\n\treturn (\n\t\t<div className={classes.join(' ')} style={{'--lines': props.maxLines || 0} as React.CSSProperties}>\n\t\t\t<div className=\"node-label__info\">{props.children}</div>\n\t\t\t<div className=\"node-label__buttons-group\">\n\t\t\t\t<div className=\"node-label__button\"\n\t\t\t\t     onClick={toggleState}>\n\t\t\t\t\t<SvgIcon name={props.icon}/>\n\t\t\t\t\t<ArrowButton isOpen={props.isOpen || false} hidden={props.isEmpty}/>\n\t\t\t\t\t<div className=\"node-label__name\">{props.name}</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"node-label__info-button\" onClick={() => setShowInfo(!showInfo)}>\n\t\t\t\t\t<SvgIcon name=\"info\"/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"node-label__v-line\"/>\n\t\t</div>\n\t);\n}","import React from \"react\";\nimport \"./style.scss\";\n\nexport function TreeNode(props: {searchText: string, className: string, children: React.ReactNode}): JSX.Element {\n\treturn (\n\t\t<div data-search={props.searchText} className={'infra-tree-node ' + props.className}>{props.children}</div>\n\t);\n}","import React from \"react\";\nimport \"./style.scss\";\nimport {Service} from \"../../models/items/service\";\nimport {ConnectionType, ConnectorView} from \"../connector\";\nimport {NodeLabel} from \"../node-label\";\nimport {TreeNode} from \"../infra-tree-node\";\n\nexport function ServiceView(props: {model: Service, isRoot?: boolean}): JSX.Element {\n\tconst type = props.isRoot ? ConnectionType.ROOT_SERVICE : ConnectionType.SERVICE;\n\n\tconst maxLines: number = Math.max(\n\t\tprops.model.globalAddr?.length || 0,\n\t\tprops.model.localAddr?.length || 0\n\t);\n\n\treturn (\n\t\t<TreeNode searchText={props.model.toSearchString()} className=\"service\">\n\t\t\t<ConnectorView type={type} caption={props.model.port > 0 ? ':' + props.model.port : ''}\n\t\t\t               globalAddr={props.model.globalAddr}\n\t\t\t               localAddr={props.model.localAddr}/>\n\t\t\t<div className=\"service__body\">\n\t\t\t\t<NodeLabel icon={props.model.type} name={props.model.name || props.model.type}\n\t\t\t\t           isEmpty={true} maxLines={maxLines}>{props.model.desc}</NodeLabel>\n\t\t\t</div>\n\t\t</TreeNode>\n\t);\n}","import React, {useContext, useState} from \"react\";\nimport \"./style.scss\";\nimport {VirtualMachine} from \"../../models/items/virtual-machine\";\nimport {ServiceView} from \"../service\";\nimport {ConnectionType, ConnectorView} from \"../connector\";\nimport {NodeLabel} from \"../node-label\";\nimport {FilterContext, FilterContextCollapseToType, FilterContextType} from \"../filter-bar/context\";\nimport {TreeNode} from \"../infra-tree-node\";\n\nexport function VirtualMachineView(props: {model: VirtualMachine}): JSX.Element | null {\n\tconst [isOpen, setOpenState] = useState(true);\n\tconst context: FilterContextType = useContext(FilterContext);\n\n\tif (context.collapseTo === FilterContextCollapseToType.VIRTUAL_MACHINE && isOpen) {\n\t\tsetOpenState(false);\n\t\treturn null;\n\t} else if (context.collapseTo === FilterContextCollapseToType.SERVICE && !isOpen) {\n\t\tsetOpenState(true);\n\t\treturn null;\n\t}\n\n\tconst services: JSX.Element[] = props.model.services.map(service => {\n\t\treturn (\n\t\t\t<ServiceView key={service.toString()} model={service}/>\n\t\t);\n\t});\n\n\tconst isEmpty: boolean = services.length === 0;\n\n\tconst maxLines: number = Math.max(\n\t\tprops.model.ip?.length || 0,\n\t\tprops.model.globalAddr?.length || 0,\n\t\tprops.model.localAddr?.length || 0\n\t);\n\n\treturn (\n\t\t<TreeNode searchText={props.model.toSearchString()} className=\"vm\">\n\t\t\t<ConnectorView type={ConnectionType.VM} ip={props.model.ip} globalAddr={props.model.globalAddr}\n\t\t\t               localAddr={props.model.localAddr}/>\n\t\t\t<div className=\"vm__body\">\n\t\t\t\t<NodeLabel icon={'vm'} name={props.model.name} isEmpty={isEmpty} isOpen={isOpen}\n\t\t\t\t           setOpenState={setOpenState} maxLines={maxLines}>{props.model.desc}</NodeLabel>\n\t\t\t\t<div className=\"vm__services\" hidden={!isOpen}>\n\t\t\t\t\t{services}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</TreeNode>\n\t);\n}","import React from \"react\";\nimport \"./style.scss\";\n\nexport function PropertiesGroup(props: {children: React.ReactNode}): JSX.Element {\n\treturn (\n\t\t<div className=\"properties-group\">\n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\nexport function Property(props: {caption: string, value: string | number}): JSX.Element {\n\treturn (\n\t\t<div className=\"property\">\n\t\t\t<span className=\"property__caption\">{props.caption}:</span>\n\t\t\t<span className=\"property__value\">{props.value}</span>\n\t\t</div>\n\t);\n}","import React, {useContext, useState} from \"react\";\nimport \"./style.scss\";\nimport {Server} from \"../../models/items/server\";\nimport {VirtualMachineView} from \"../virtual-machine\";\nimport {ServiceView} from \"../service\";\nimport {ConnectionType, ConnectorView} from \"../connector\";\nimport {NodeLabel} from \"../node-label\";\nimport {PropertiesGroup, Property} from \"../property\";\nimport {FilterContext, FilterContextCollapseToType, FilterContextType} from \"../filter-bar/context\";\nimport {TreeNode} from \"../infra-tree-node\";\n\nexport function ServerView(props: {model: Server}): JSX.Element | null {\n\tconst [isOpen, setOpenState] = useState(true);\n\tconst context: FilterContextType = useContext(FilterContext);\n\n\tif (context.collapseTo === FilterContextCollapseToType.SERVER) {\n\t\tif (isOpen) {\n\t\t\tsetOpenState(false);\n\t\t\treturn null;\n\t\t}\n\t} else if (\n\t\t[FilterContextCollapseToType.VIRTUAL_MACHINE, FilterContextCollapseToType.SERVICE].includes(context.collapseTo)\n\t\t&& !isOpen\n\t) {\n\t\tsetOpenState(true);\n\t\treturn null;\n\t}\n\n\tconst vms: JSX.Element[] = props.model.vms.map(vm => {\n\t\treturn (\n\t\t\t<VirtualMachineView key={vm.toString()} model={vm}/>\n\t\t);\n\t});\n\n\tconst services: JSX.Element[] = props.model.services.map(service => {\n\t\treturn (\n\t\t\t<ServiceView key={service.toString()} isRoot={true} model={service}/>\n\t\t);\n\t});\n\n\tconst isEmpty: boolean = services.length === 0 && vms.length === 0;\n\tconst maxLines: number = Math.max(\n\t\tprops.model.ip?.length || 0,\n\t\tprops.model.globalAddr?.length || 0,\n\t\tprops.model.localAddr?.length || 0\n\t);\n\n\treturn (\n\t\t<TreeNode searchText={props.model.toSearchString()} className=\"server\">\n\t\t\t<ConnectorView type={ConnectionType.LAN} ip={props.model.ip} globalAddr={props.model.globalAddr}\n\t\t\t               localAddr={props.model.localAddr}/>\n\t\t\t<div className=\"server__body\">\n\t\t\t\t<NodeLabel icon={'server'} name={props.model.name} isEmpty={isEmpty} isOpen={isOpen}\n\t\t\t\t           setOpenState={setOpenState} maxLines={maxLines}>\n\t\t\t\t\t<PropertiesGroup>\n\t\t\t\t\t\t<Property caption={'CPU'} value={props.model.cpu}/>\n\t\t\t\t\t\t<Property caption={'RAM'} value={props.model.ram}/>\n\t\t\t\t\t\t<Property caption={'Disk'} value={props.model.disk}/>\n\t\t\t\t\t\t<Property caption={'OS'} value={props.model.os}/>\n\t\t\t\t\t</PropertiesGroup>\n\t\t\t\t\t<div>{props.model.desc}</div>\n\t\t\t\t</NodeLabel>\n\t\t\t\t<div className=\"server__content\" hidden={!isOpen}>\n\t\t\t\t\t{services}\n\t\t\t\t\t{vms}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</TreeNode>\n\t);\n}","import React, {useContext, useState} from \"react\";\nimport \"./style.scss\";\nimport {DataCenter} from \"../../models/items/data-center\";\nimport {ServerView} from \"../server\";\nimport {ConnectionType, ConnectorView} from \"../connector\";\nimport {NodeLabel} from \"../node-label\";\nimport {PropertiesGroup, Property} from \"../property\";\nimport {FilterContext, FilterContextCollapseToType, FilterContextType} from \"../filter-bar/context\";\nimport {TreeNode} from \"../infra-tree-node\";\n\nexport function DataCenterView(props: {model: DataCenter}): JSX.Element | null {\n\tconst [isOpen, setOpenState] = useState(true);\n\tconst context:FilterContextType = useContext(FilterContext);\n\n\tif (context.collapseTo === FilterContextCollapseToType.DATA_CENTER) {\n\t\tif (isOpen) {\n\t\t\tsetOpenState(false);\n\t\t\treturn null;\n\t\t}\n\t} else if (context.collapseTo !== FilterContextCollapseToType.NONE && !isOpen) {\n\t\tsetOpenState(true);\n\t\treturn null;\n\t}\n\n\tlet vmsCount: number = 0;\n\tconst servers: JSX.Element[] = props.model.servers.map(server => {\n\t\tvmsCount += server.vms.length;\n\t\treturn (\n\t\t\t<ServerView key={server.toString()} model={server}/>\n\t\t);\n\t});\n\n\tconst isEmpty: boolean = servers.length === 0;\n\n\treturn (\n\t\t<TreeNode searchText={props.model.toSearchString()} className=\"data-center\">\n\t\t\t<ConnectorView type={ConnectionType.WAN}/>\n\t\t\t<div className=\"data-center__wan-label\">WAN</div>\n\t\t\t<div className=\"data-center__body\">\n\t\t\t\t<NodeLabel icon={'data-center'} name={props.model.name} isEmpty={isEmpty} isOpen={isOpen}\n\t\t\t\t           setOpenState={setOpenState}>\n\t\t\t\t\t<PropertiesGroup>\n\t\t\t\t\t\t<Property caption={'Servers'} value={servers.length}/>\n\t\t\t\t\t\t<Property caption={'VMs'} value={vmsCount}/>\n\t\t\t\t\t</PropertiesGroup>\n\t\t\t\t\t<div>{props.model.desc}</div>\n\t\t\t\t</NodeLabel>\n\t\t\t\t<div className=\"data-center__servers\" hidden={!isOpen}>\n\t\t\t\t\t<div className=\"data-center__lan-label\">LAN</div>\n\t\t\t\t\t{servers}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</TreeNode>\n\t);\n}","import React, {useEffect, useState} from \"react\";\nimport {DataLoader} from \"../../models/data-loader\";\nimport {DataCenter} from \"../../models/items/data-center\";\nimport {DataCenterView} from \"../data-center\";\nimport './style.scss';\n\nexport function InfraTree(props: {hiddenNodesCount: number}): JSX.Element {\n\tconst [dataCenters, setDataCenters] = useState([] as DataCenter[]);\n\n\tuseEffect(() => {\n\t\tnew DataLoader()\n\t\t\t.loadByUrl('data/data.xml')\n\t\t\t.then((loader: DataLoader) => {\n\t\t\t\tsetDataCenters(loader.dataCenters);\n\t\t\t});\n\t}, []);\n\n\tconst dcs = dataCenters.map((dataCenter) => {\n\t\treturn (\n\t\t\t<DataCenterView key={dataCenter.toString()} model={dataCenter}/>\n\t\t);\n\t});\n\n\treturn (\n\t\t<div className=\"infra-tree\">\n\t\t\t<div className=\"infra-tree__search-stat\"\n\t\t\t     hidden={props.hiddenNodesCount === 0}>Hidden nodes: {props.hiddenNodesCount}</div>\n\t\t\t<div className=\"infra-tree__data-centers\">{dcs}</div>\n\t\t</div>\n\t)\n}","import \"./style.scss\";\r\nimport {SvgIcon} from \"../svg-icon\";\r\nimport {FilterContext, FilterContextCollapseToType, FilterContextType} from \"./context\";\r\nimport {useContext} from \"react\";\r\n\r\nexport function FilterBar(props: {setHiddenNodesCount: (v: number) => void}): JSX.Element {\r\n\tconst context: FilterContextType = useContext(FilterContext);\r\n\tlet inputEl: HTMLInputElement;\r\n\treturn (\r\n\t\t<div className=\"filter-bar\">\r\n\t\t\t<label className=\"filter-bar__caption\" htmlFor=\"search-input\">Search: </label>\r\n\t\t\t<input ref={el => inputEl = el as HTMLInputElement} className=\"filter-bar__search\" id=\"search-input\"\r\n\t\t\t       type=\"text\"\r\n\t\t\t       autoComplete={'off'}\r\n\t\t\t       onKeyUp={(event) =>\r\n\t\t\t\t       props.setHiddenNodesCount(filterNodesByText(inputEl.value))\r\n\t\t\t       }\r\n\t\t\t       placeholder=\"Name, ip, port etc...\"/>\r\n\t\t\t<div className=\"filter-bar__button filter-bar__button_cancel\"\r\n\t\t\t     onClick={() => props.setHiddenNodesCount(filterNodesByText(inputEl.value = ''))}>\r\n\t\t\t\t<SvgIcon name=\"cancel\"/>\r\n\t\t\t</div>\r\n\t\t\t<label className=\"filter-bar__caption\">Collapse to: </label>\r\n\t\t\t<div className=\"filter-bar__button filter-bar__button_dc\" onClick={() => {\r\n\t\t\t\tcontext.setCollapseTo(FilterContextCollapseToType.DATA_CENTER);\r\n\t\t\t}}>\r\n\t\t\t\t<SvgIcon name=\"data-center\"/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"filter-bar__button filter-bar__button_srv\" onClick={() => {\r\n\t\t\t\tcontext.setCollapseTo(FilterContextCollapseToType.SERVER);\r\n\t\t\t}}>\r\n\t\t\t\t<SvgIcon name=\"server\"/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"filter-bar__button filter-bar__button_vm\" onClick={() => {\r\n\t\t\t\tcontext.setCollapseTo(FilterContextCollapseToType.VIRTUAL_MACHINE);\r\n\t\t\t}}>\r\n\t\t\t\t<SvgIcon name=\"vm\"/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"filter-bar__button filter-bar__button_service\" onClick={() => {\r\n\t\t\t\tcontext.setCollapseTo(FilterContextCollapseToType.SERVICE);\r\n\t\t\t}}>\r\n\t\t\t\t<SvgIcon name=\"service\"/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nfunction filterNodesByText(search: string): number {\r\n\tsearch = search.replace(/[\"'[\\]]/g, '').toLowerCase();\r\n\tconst allEls: NodeListOf<Element> = document.querySelectorAll(`.infra-tree-node`);\r\n\r\n\tif (search === '') {\r\n\t\tallEls.forEach(el => {\r\n\t\t\t(el as HTMLElement).hidden = false;\r\n\t\t});\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tlet hiddenNodes: number = 0;\r\n\tallEls.forEach((el) => {\r\n\t\tconst htmlEl: HTMLElement = el as HTMLElement;\r\n\t\tconst text: string = htmlEl.dataset.search as string;\r\n\t\thtmlEl.hidden = !text.includes(search);\r\n\r\n\t\tif (htmlEl.hidden) {\r\n\t\t\thiddenNodes++;\r\n\t\t}\r\n\t});\r\n\r\n\treturn hiddenNodes;\r\n}","import React, {useState} from \"react\";\nimport {InfraTree} from \"./infra-tree/infra-tree\";\nimport './style/index.scss';\nimport {FilterBar} from \"./filter-bar\";\nimport {FilterContextProvider} from \"./filter-bar/context\";\n\nexport function App() {\n\tconst [hiddenNodesCount, setHiddenNodesCount] = useState(0);\n\treturn (\n\t\t<FilterContextProvider>\n\t\t\t<FilterBar setHiddenNodesCount={setHiddenNodesCount}/>\n\t\t\t<InfraTree hiddenNodesCount={hiddenNodesCount}/>\n\t\t</FilterContextProvider>\n\t);\n}","import React, {StrictMode} from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from \"./components/app\";\n\nReactDOM.render(\n    <StrictMode>\n        <App />\n    </StrictMode>,\n    document.getElementById('root')\n)"],"sourceRoot":""}