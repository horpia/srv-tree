{"version":3,"sources":["models/items/abstract-tree-node.ts","models/items/service.ts","components/connector/index.tsx","models/items/virtual-machine.ts","models/items/server.ts","models/items/data-center.ts","models/data-loader.ts","components/svg-icon/icons.svg","components/svg-icon/elasticsearch.svg","components/svg-icon/apache.svg","components/svg-icon/mssql.svg","components/svg-icon/db2.svg","components/svg-icon/index.tsx","components/filter-bar/context.tsx","components/arrow-button/index.tsx","components/node-label/index.tsx","components/infra-tree-node/index.tsx","components/service/index.tsx","components/virtual-machine/index.tsx","components/property/index.tsx","components/server/index.tsx","components/data-center/index.tsx","components/infra-tree/infra-tree.tsx","components/filter-bar/index.tsx","components/app.tsx","index.tsx"],"names":["AbstractTreeNode","el","name","desc","id","searchStringCache","this","getAttribute","querySelector","textContent","sequence","getTextToSearch","toLowerCase","split","filter","v","i","arr","indexOf","join","replace","trimEnd","ConnectionType","Service","type","domain","localDomain","port","parseInt","VirtualMachine","ip","services","querySelectorAll","forEach","push","map","vm","toSearchString","Server","cpu","ram","disk","os","vms","DataCenter","servers","srv","DataLoader","data","dataCenters","url","fetch","cache","text","xml","DOMParser","parseFromString","urlParts","pop","relUrl","loaders","Promise","resolve","a","parentElement","firstElementChild","replaceChild","all","splice","length","ConnectorView","props","className","caption","splitByComma","str","toString","supportedIcons","imgFiles","elasticSearchIcon","apacheIcon","mssqlIcon","db2Icon","SvgIcon","includes","src","alt","xmlns","xmlnsXlink","href","icons","FilterContextCollapseToType","ArrowButton","hidden","isOpen","defaultContext","collapseTo","NONE","setCollapseTo","FilterContext","React","createContext","FilterContextProvider","useState","value","Provider","children","NodeLabel","context","useContext","showInfo","setShowInfo","classes","isEmpty","onClick","setOpenState","icon","TreeNode","data-search","searchText","ServiceView","isRoot","ROOT_SERVICE","SERVICE","model","VirtualMachineView","VIRTUAL_MACHINE","service","VM","PropertiesGroup","Property","ServerView","SERVER","LAN","DataCenterView","DATA_CENTER","vmsCount","server","WAN","InfraTree","setDataCenters","useEffect","loadByUrl","then","loader","dcs","dataCenter","hiddenNodesCount","FilterBar","inputEl","htmlFor","ref","autoComplete","onKeyUp","event","setHiddenNodesCount","filterNodesByText","placeholder","search","allEls","document","hiddenNodes","htmlEl","dataset","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.5b3ff5c5.chunk.js","sourcesContent":["export abstract class AbstractTreeNode {\n\treadonly name: string;\n\treadonly desc: string;\n\n\tprivate static sequence: number = 0;\n\tprivate readonly id: string;\n\tprivate searchStringCache: string = '';\n\n\tprotected constructor(el: Element) {\n\t\tthis.name = el.getAttribute('name') || '';\n\t\tthis.desc = el.querySelector(':scope > desc')?.textContent || '';\n\t\tthis.id = new.target.name + ':' + this.name + '@' + (++AbstractTreeNode.sequence);\n\t}\n\n\tprotected abstract getTextToSearch(): string;\n\n\ttoSearchString(): string {\n\t\tif (this.searchStringCache !== '') {\n\t\t\treturn this.searchStringCache;\n\t\t}\n\n\t\tthis.searchStringCache = this.name + ' ' + this.desc + ' ' + this.getTextToSearch();\n\t\tthis.searchStringCache = this.searchStringCache.toLowerCase().split(' ')\n\t\t\t.filter((v: string, i: number, arr: string[]) => {\n\t\t\t\treturn i === arr.indexOf(v);\n\t\t\t})\n\t\t\t.join(' ')\n\t\t\t.replace(/\\s+/g, ' ')\n\t\t\t.trimEnd();\n\n\t\treturn this.searchStringCache;\n\t}\n\n\ttoString(): string {\n\t\treturn this.id;\n\t}\n}","import {AbstractTreeNode} from \"./abstract-tree-node\";\n\nexport class Service extends AbstractTreeNode {\n\treadonly type: string;\n\treadonly domain: string;\n\treadonly localDomain: string;\n\treadonly port: number;\n\n\tconstructor(el: Element) {\n\t\tsuper(el);\n\t\tthis.type = el.getAttribute('type') || 'service';\n\t\tthis.domain = el.getAttribute('domain') || '';\n\t\tthis.localDomain = el.getAttribute('local-domain') || '';\n\t\tthis.port = parseInt(el.getAttribute('port') || '0', 10);\n\t}\n\n\tprotected getTextToSearch(): string {\n\t\treturn this.type\n\t\t\t+ ' ' + this.domain\n\t\t\t+ ' ' + this.localDomain\n\t\t\t+ ' ' + this.port;\n\t}\n}","import React from \"react\";\nimport \"./style.scss\";\n\nexport enum ConnectionType {\n\tLAN = 'lan',\n\tWAN = 'wan',\n\tVM = 'vm',\n\tROOT_SERVICE = 'root-service',\n\tSERVICE = 'service',\n}\n\ntype ConnectorViewType = {\n\ttype: ConnectionType,\n\tcaption?: string,\n\tdomain?: string,\n\tlocalDomain?: string\n}\n\nexport function ConnectorView(props: ConnectorViewType): JSX.Element {\n\treturn (\n\t\t<div className={'connector connector_' + props.type}>\n\t\t\t<div className=\"connector__v-line\"/>\n\t\t\t<div className=\"connector__connection\">\n\t\t\t\t<div className=\"connector__point\"/>\n\t\t\t\t<div className=\"connector__h-line\">\n\t\t\t\t\t<div className=\"connector__caption\">{props.caption || ''}</div>\n\t\t\t\t</div>\n\t\t\t\t{props.domain\n\t\t\t\t\t?\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div className=\"connector__wan-point\"/>\n\t\t\t\t\t\t<div className=\"connector__wan-line\">\n\t\t\t\t\t\t\t<div className=\"connector__wan-caption\">{splitByComma(props.domain)}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t\t: null\n\t\t\t\t}\n\t\t\t\t{props.localDomain\n\t\t\t\t\t?\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div className=\"connector__lan-point\"/>\n\t\t\t\t\t\t<div className=\"connector__lan-line\">\n\t\t\t\t\t\t\t<div className=\"connector__lan-caption\">{splitByComma(props.localDomain)}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t\t: null\n\t\t\t\t}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nfunction splitByComma(str: string): React.ReactNode {\n\treturn str.split(',').map((v: string, i: number) => <div key={i.toString()}>{v}</div>);\n}","import {Service} from \"./service\";\nimport {AbstractTreeNode} from \"./abstract-tree-node\";\n\nexport class VirtualMachine extends AbstractTreeNode {\n\treadonly ip: string;\n\treadonly domain: string;\n\treadonly localDomain: string;\n\treadonly services: Service[];\n\n\tconstructor(el: Element) {\n\t\tsuper(el);\n\t\tthis.ip = el.getAttribute('ip') || 'N/D';\n\t\tthis.domain = el.getAttribute('domain') || '';\n\t\tthis.localDomain = el.getAttribute('local-domain') || '';\n\t\tthis.services = [];\n\n\t\tel.querySelectorAll(':scope > service').forEach(el => {\n\t\t\tthis.services.push(new Service(el));\n\t\t});\n\t}\n\n\tprotected getTextToSearch(): string {\n\t\treturn this.ip\n\t\t\t+ ' ' + this.domain\n\t\t\t+ ' ' + this.localDomain\n\t\t\t+ ' ' + this.services.map(vm => vm.toSearchString()).join(' ');\n\t}\n}","import {VirtualMachine} from \"./virtual-machine\";\nimport {Service} from \"./service\";\nimport {AbstractTreeNode} from \"./abstract-tree-node\";\n\nexport class Server extends AbstractTreeNode {\n\treadonly ip: string;\n\treadonly domain: string;\n\treadonly localDomain: string;\n\treadonly cpu: string;\n\treadonly ram: string;\n\treadonly disk: string;\n\treadonly os: string;\n\treadonly vms: VirtualMachine[];\n\treadonly services: Service[];\n\n\tconstructor(el: Element) {\n\t\tsuper(el);\n\t\tthis.ip = el.getAttribute('ip') || '';\n\t\tthis.domain = el.getAttribute('domain') || '';\n\t\tthis.localDomain = el.getAttribute('local-domain') || '';\n\t\tthis.vms = [];\n\t\tthis.services = [];\n\n\t\tthis.cpu = el.querySelector(':scope > cpu')?.textContent || '';\n\t\tthis.ram = el.querySelector(':scope > ram')?.textContent || '';\n\t\tthis.disk = el.querySelector(':scope > disk')?.textContent || '';\n\t\tthis.os = el.querySelector(':scope > os')?.textContent || '';\n\n\t\tel.querySelectorAll(':scope > vm').forEach(el => {\n\t\t\tthis.vms.push(new VirtualMachine(el));\n\t\t});\n\n\t\tel.querySelectorAll(':scope > service').forEach(el => {\n\t\t\tthis.services.push(new Service(el));\n\t\t});\n\t}\n\n\tprotected getTextToSearch(): string {\n\t\treturn this.ip\n\t\t\t+ ' ' + this.domain\n\t\t\t+ ' ' + this.localDomain\n\t\t\t+ ' ' + this.cpu\n\t\t\t+ ' ' + this.os\n\t\t\t+ ' ' + this.vms.map(vm => vm.toSearchString()).join(' ')\n\t\t\t+ ' ' + this.services.map(vm => vm.toSearchString()).join(' ');\n\t}\n}","import {Server} from \"./server\";\nimport {AbstractTreeNode} from \"./abstract-tree-node\";\n\nexport class DataCenter extends AbstractTreeNode {\n\treadonly servers: Server[];\n\n\tconstructor(el: Element) {\n\t\tsuper(el);\n\t\tthis.servers = [];\n\n\t\tel.querySelectorAll(':scope > srv').forEach(el => {\n\t\t\tthis.servers.push(new Server(el));\n\t\t});\n\t}\n\n\tprotected getTextToSearch(): string {\n\t\treturn this.servers.map(srv => srv.toSearchString()).join(' ');\n\t}\n}","import {DataCenter} from \"./items/data-center\";\n\nexport class DataLoader {\n\tprivate data?: XMLDocument;\n\treadonly dataCenters: DataCenter[] = [];\n\n\tasync loadByUrl(url: string): Promise<DataLoader> {\n\t\tconst xml: string = await (await fetch(url, {cache: 'no-cache'})).text();\n\t\tthis.data = new DOMParser().parseFromString(xml, 'application/xml');\n\n\t\tconst urlParts: string[] = url.split('/');\n\t\turlParts.pop();\n\t\tconst relUrl: string = urlParts.join('/');\n\t\tconst loaders: Promise<void>[] = [];\n\n\t\tthis.data.querySelectorAll('include[src]').forEach(el => {\n\t\t\tloaders.push(new Promise<void>(async resolve => {\n\t\t\t\tconst url: string = relUrl + '/' + el.getAttribute('src');\n\t\t\t\tconst xml: string = await (await fetch(url, {cache: 'no-cache'})).text();\n\t\t\t\tconst data = new DOMParser().parseFromString(xml, 'application/xml');\n\t\t\t\tif (el.parentElement && data.firstElementChild) {\n\t\t\t\t\tel.parentElement.replaceChild(data.firstElementChild, el);\n\t\t\t\t}\n\t\t\t\tresolve();\n\t\t\t}));\n\t\t});\n\n\t\tawait Promise.all(loaders);\n\n\t\tconst dataCenters: DataCenter[] = [];\n\t\tthis.data.querySelectorAll('infra > dc').forEach(el => {\n\t\t\tdataCenters.push(new DataCenter(el));\n\t\t});\n\t\tthis.dataCenters.splice(0, this.dataCenters.length, ...dataCenters);\n\t\treturn this;\n\t}\n}","export default __webpack_public_path__ + \"static/media/icons.b1ee9923.svg\";","export default __webpack_public_path__ + \"static/media/elasticsearch.81e26c95.svg\";","export default __webpack_public_path__ + \"static/media/apache.ec3db90d.svg\";","export default __webpack_public_path__ + \"static/media/mssql.cfe2c656.svg\";","export default __webpack_public_path__ + \"static/media/db2.5d89dc76.svg\";","import icons from \"./icons.svg\";\nimport elasticSearchIcon from \"./elasticsearch.svg\";\nimport apacheIcon from \"./apache.svg\";\nimport mssqlIcon from \"./mssql.svg\";\nimport db2Icon from \"./db2.svg\";\nimport \"./style.scss\";\n\nconst supportedIcons: string[] = [\n\t// Internal icons\n\t'server', 'vm', 'data-center', 'service', 'arrow', 'info', 'cancel',\n\n\t// Logo of services\n\t'php', 'php-fpm', 'nginx', 'redis', 'mysql', 'cassandra',\n\t'rabbitmq', 'sphinxsearch', 'elasticsearch', 'clickhouse',\n\t'docker', 'nodejs', 'kafka', 'cron', 'crontab', 'storage',\n\t'postgresql', 'mariadb', 'oracle', 'mongodb', 'apache', 'mssql',\n\t'db2'\n];\n\n\nconst imgFiles: Record<string, string> = {\n\t'elasticsearch': elasticSearchIcon,\n\t'apache': apacheIcon,\n\t'mssql': mssqlIcon,\n\t'db2': db2Icon,\n};\n\nexport function SvgIcon(props: {name: string, className?: string}): JSX.Element {\n\tlet name: string = props.name.toLowerCase();\n\tlet className: string = props.className || '';\n\n\tif (!supportedIcons.includes(name)) {\n\t\tname = 'service';\n\t}\n\n\tif (typeof imgFiles[name] === 'string') {\n\t\treturn (\n\t\t\t<img src={imgFiles[name]} alt=\"\" className={'icon ' + className}/>\n\t\t);\n\t}\n\n\treturn (\n\t\t<svg xmlns=\"http://www.w3.org/2000/svg\"\n\t\t     xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n\t\t     className={'icon ' + className}>\n\t\t\t<use href={`${icons}#${name}`}/>\n\t\t</svg>\n\t);\n}","import React, {useState} from \"react\";\n\nexport enum FilterContextCollapseToType {\n\tNONE,\n\tDATA_CENTER,\n\tSERVER,\n\tVIRTUAL_MACHINE,\n\tSERVICE\n}\n\nexport type FilterContextType = {\n\tcollapseTo: FilterContextCollapseToType,\n\tsetCollapseTo: (v: FilterContextCollapseToType) => void,\n};\n\nconst defaultContext: FilterContextType = {\n\tcollapseTo: FilterContextCollapseToType.NONE,\n\tsetCollapseTo: (v: FilterContextCollapseToType): void => {},\n};\n\nexport const FilterContext: React.Context<FilterContextType> = React.createContext(defaultContext);\n\nexport function FilterContextProvider(props: {children?: React.ReactNode}) {\n\tconst [collapseTo, setCollapseTo] = useState(FilterContextCollapseToType.NONE);\n\n\tconst value: FilterContextType = {\n\t\tcollapseTo,\n\t\tsetCollapseTo,\n\t};\n\n\treturn (\n\t\t<FilterContext.Provider value={value}>\n\t\t\t{props.children}\n\t\t</FilterContext.Provider>\n\t);\n}","import React from \"react\";\nimport \"./style.scss\";\nimport {SvgIcon} from \"../svg-icon\";\n\nexport function ArrowButton(props: {isOpen: boolean, hidden?: boolean}): JSX.Element {\n\treturn (\n\t\t<div className=\"arrow-button\" hidden={!!props.hidden}>\n\t\t\t<SvgIcon name=\"arrow\"\n\t\t\t         className={(props.isOpen ? 'icon_rot270' : 'icon_rot90') + ' icon_sm arrow-button__icon'}/>\n\t\t</div>\n\t);\n}","import \"./style.scss\";\nimport React, {useContext, useState} from \"react\";\nimport {SvgIcon} from \"../svg-icon\";\nimport {ArrowButton} from \"../arrow-button\";\nimport {FilterContext, FilterContextCollapseToType, FilterContextType} from \"../filter-bar/context\";\n\nexport type NodeLabelType = {\n\ticon: string,\n\tname: string,\n\tisEmpty: boolean,\n\tisOpen?: boolean,\n\tsetOpenState?: (el: any) => any,\n\tchildren?: React.ReactNode\n}\n\nexport function NodeLabel(props: NodeLabelType): JSX.Element {\n\tconst context: FilterContextType = useContext(FilterContext);\n\tconst [showInfo, setShowInfo] = useState(false);\n\tlet classes: string[] = ['node-label'];\n\n\tif (showInfo) {\n\t\tclasses.push('node-label_show-info');\n\t}\n\n\tif (props.isEmpty) {\n\t\tclasses.push('node-label_empty');\n\t}\n\n\tconst toggleState: () => void = () => {\n\t\tif (!props.setOpenState) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (context.collapseTo !== FilterContextCollapseToType.NONE) {\n\t\t\t// сбрасываем ранее установленый флаг сворачиявания дерева до определенного уровня нод\n\t\t\tcontext.setCollapseTo(FilterContextCollapseToType.NONE);\n\t\t}\n\n\t\tprops.setOpenState(!props.isOpen);\n\t};\n\n\treturn (\n\t\t<div className={classes.join(' ')}>\n\t\t\t<div className=\"node-label__info\">{props.children}</div>\n\t\t\t<div className=\"node-label__buttons-group\">\n\t\t\t\t<div className=\"node-label__button\"\n\t\t\t\t     onClick={toggleState}>\n\t\t\t\t\t<SvgIcon name={props.icon}/>\n\t\t\t\t\t<ArrowButton isOpen={props.isOpen || false} hidden={props.isEmpty}/>\n\t\t\t\t\t<div className=\"node-label__name\">{props.name}</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"node-label__info-button\" onClick={() => setShowInfo(!showInfo)}>\n\t\t\t\t\t<SvgIcon name=\"info\"/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}","import React from \"react\";\nimport \"./style.scss\";\n\nexport function TreeNode(props: {searchText: string, className: string, children: React.ReactNode}): JSX.Element {\n\treturn (\n\t\t<div data-search={props.searchText} className={'infra-tree-node ' + props.className}>{props.children}</div>\n\t);\n}","import React from \"react\";\nimport \"./style.scss\";\nimport {Service} from \"../../models/items/service\";\nimport {ConnectionType, ConnectorView} from \"../connector\";\nimport {NodeLabel} from \"../node-label\";\nimport {TreeNode} from \"../infra-tree-node\";\n\nexport function ServiceView(props: {model: Service, isRoot?: boolean}): JSX.Element {\n\tconst type = props.isRoot ? ConnectionType.ROOT_SERVICE : ConnectionType.SERVICE;\n\treturn (\n\t\t<TreeNode searchText={props.model.toSearchString()} className=\"service\">\n\t\t\t<ConnectorView type={type} caption={props.model.port > 0 ? ':' + props.model.port : ''}\n\t\t\t               domain={props.model.domain}\n\t\t\t               localDomain={props.model.localDomain}/>\n\t\t\t<div className=\"service__body\">\n\t\t\t\t<NodeLabel icon={props.model.type} name={props.model.name || props.model.type}\n\t\t\t\t           isEmpty={true}>{props.model.desc}</NodeLabel>\n\t\t\t</div>\n\t\t</TreeNode>\n\t);\n}","import React, {useContext, useState} from \"react\";\nimport \"./style.scss\";\nimport {VirtualMachine} from \"../../models/items/virtual-machine\";\nimport {ServiceView} from \"../service\";\nimport {ConnectionType, ConnectorView} from \"../connector\";\nimport {NodeLabel} from \"../node-label\";\nimport {FilterContext, FilterContextCollapseToType, FilterContextType} from \"../filter-bar/context\";\nimport {TreeNode} from \"../infra-tree-node\";\n\nexport function VirtualMachineView(props: {model: VirtualMachine}): JSX.Element | null {\n\tconst [isOpen, setOpenState] = useState(true);\n\tconst context:FilterContextType = useContext(FilterContext);\n\n\tif (context.collapseTo === FilterContextCollapseToType.VIRTUAL_MACHINE && isOpen) {\n\t\tsetOpenState(false);\n\t\treturn null;\n\t} else if (context.collapseTo === FilterContextCollapseToType.SERVICE && !isOpen) {\n\t\tsetOpenState(true);\n\t\treturn null;\n\t}\n\n\tconst services: JSX.Element[] = props.model.services.map(service => {\n\t\treturn (\n\t\t\t<ServiceView key={service.toString()} model={service}/>\n\t\t);\n\t});\n\n\tconst isEmpty: boolean = services.length === 0;\n\n\treturn (\n\t\t<TreeNode searchText={props.model.toSearchString()} className=\"vm\">\n\t\t\t<ConnectorView type={ConnectionType.VM} caption={props.model.ip} domain={props.model.domain}\n\t\t\t               localDomain={props.model.localDomain}/>\n\t\t\t<div className=\"vm__body\">\n\t\t\t\t<NodeLabel icon={'vm'} name={props.model.name} isEmpty={isEmpty} isOpen={isOpen}\n\t\t\t\t           setOpenState={setOpenState}>{props.model.desc}</NodeLabel>\n\t\t\t\t<div className=\"vm__services\" hidden={!isOpen}>\n\t\t\t\t\t{services}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</TreeNode>\n\t);\n}","import React from \"react\";\nimport \"./style.scss\";\n\nexport function PropertiesGroup(props: {children: React.ReactNode}): JSX.Element {\n\treturn (\n\t\t<div className=\"properties-group\">\n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\nexport function Property(props: {caption: string, value: string | number}): JSX.Element {\n\treturn (\n\t\t<div className=\"property\">\n\t\t\t<span className=\"property__caption\">{props.caption}:</span>\n\t\t\t<span className=\"property__value\">{props.value}</span>\n\t\t</div>\n\t);\n}","import React, {useContext, useState} from \"react\";\nimport \"./style.scss\";\nimport {Server} from \"../../models/items/server\";\nimport {VirtualMachineView} from \"../virtual-machine\";\nimport {ServiceView} from \"../service\";\nimport {ConnectionType, ConnectorView} from \"../connector\";\nimport {NodeLabel} from \"../node-label\";\nimport {PropertiesGroup, Property} from \"../property\";\nimport {FilterContext, FilterContextCollapseToType, FilterContextType} from \"../filter-bar/context\";\nimport {TreeNode} from \"../infra-tree-node\";\n\nexport function ServerView(props: {model: Server}): JSX.Element | null {\n\tconst [isOpen, setOpenState] = useState(true);\n\tconst context: FilterContextType = useContext(FilterContext);\n\n\tif (context.collapseTo === FilterContextCollapseToType.SERVER) {\n\t\tif (isOpen) {\n\t\t\tsetOpenState(false);\n\t\t\treturn null;\n\t\t}\n\t} else if (\n\t\t[FilterContextCollapseToType.VIRTUAL_MACHINE, FilterContextCollapseToType.SERVICE].includes(context.collapseTo)\n\t\t&& !isOpen\n\t) {\n\t\tsetOpenState(true);\n\t\treturn null;\n\t}\n\n\tconst vms: JSX.Element[] = props.model.vms.map(vm => {\n\t\treturn (\n\t\t\t<VirtualMachineView key={vm.toString()} model={vm}/>\n\t\t);\n\t});\n\n\tconst services: JSX.Element[] = props.model.services.map(service => {\n\t\treturn (\n\t\t\t<ServiceView key={service.toString()} isRoot={true} model={service}/>\n\t\t);\n\t});\n\n\tconst isEmpty: boolean = services.length === 0 && vms.length === 0;\n\n\treturn (\n\t\t<TreeNode searchText={props.model.toSearchString()} className=\"server\">\n\t\t\t<ConnectorView type={ConnectionType.LAN} caption={props.model.ip} domain={props.model.domain}\n\t\t\t               localDomain={props.model.localDomain}/>\n\t\t\t<div className=\"server__body\">\n\t\t\t\t<NodeLabel icon={'server'} name={props.model.name} isEmpty={isEmpty} isOpen={isOpen}\n\t\t\t\t           setOpenState={setOpenState}>\n\t\t\t\t\t<PropertiesGroup>\n\t\t\t\t\t\t<Property caption={'CPU'} value={props.model.cpu}/>\n\t\t\t\t\t\t<Property caption={'RAM'} value={props.model.ram}/>\n\t\t\t\t\t\t<Property caption={'Disk'} value={props.model.disk}/>\n\t\t\t\t\t\t<Property caption={'OS'} value={props.model.os}/>\n\t\t\t\t\t</PropertiesGroup>\n\t\t\t\t\t<div>{props.model.desc}</div>\n\t\t\t\t</NodeLabel>\n\t\t\t\t<div className=\"server__content\" hidden={!isOpen}>\n\t\t\t\t\t{services}\n\t\t\t\t\t{vms}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</TreeNode>\n\t);\n}","import React, {useContext, useState} from \"react\";\nimport \"./style.scss\";\nimport {DataCenter} from \"../../models/items/data-center\";\nimport {ServerView} from \"../server\";\nimport {ConnectionType, ConnectorView} from \"../connector\";\nimport {NodeLabel} from \"../node-label\";\nimport {PropertiesGroup, Property} from \"../property\";\nimport {FilterContext, FilterContextCollapseToType, FilterContextType} from \"../filter-bar/context\";\nimport {TreeNode} from \"../infra-tree-node\";\n\nexport function DataCenterView(props: {model: DataCenter}): JSX.Element | null {\n\tconst [isOpen, setOpenState] = useState(true);\n\tconst context:FilterContextType = useContext(FilterContext);\n\n\tif (context.collapseTo === FilterContextCollapseToType.DATA_CENTER) {\n\t\tif (isOpen) {\n\t\t\tsetOpenState(false);\n\t\t\treturn null;\n\t\t}\n\t} else if (context.collapseTo !== FilterContextCollapseToType.NONE && !isOpen) {\n\t\tsetOpenState(true);\n\t\treturn null;\n\t}\n\n\tlet vmsCount: number = 0;\n\tconst servers: JSX.Element[] = props.model.servers.map(server => {\n\t\tvmsCount += server.vms.length;\n\t\treturn (\n\t\t\t<ServerView key={server.toString()} model={server}/>\n\t\t);\n\t});\n\n\tconst isEmpty: boolean = servers.length === 0;\n\n\treturn (\n\t\t<TreeNode searchText={props.model.toSearchString()} className=\"data-center\">\n\t\t\t<ConnectorView type={ConnectionType.WAN}/>\n\t\t\t<div className=\"data-center__wan-label\">WAN</div>\n\t\t\t<div className=\"data-center__body\">\n\t\t\t\t<NodeLabel icon={'data-center'} name={props.model.name} isEmpty={isEmpty} isOpen={isOpen}\n\t\t\t\t           setOpenState={setOpenState}>\n\t\t\t\t\t<PropertiesGroup>\n\t\t\t\t\t\t<Property caption={'Servers'} value={servers.length}/>\n\t\t\t\t\t\t<Property caption={'VMs'} value={vmsCount}/>\n\t\t\t\t\t</PropertiesGroup>\n\t\t\t\t\t<div>{props.model.desc}</div>\n\t\t\t\t</NodeLabel>\n\t\t\t\t<div className=\"data-center__servers\" hidden={!isOpen}>\n\t\t\t\t\t<div className=\"data-center__lan-label\">LAN</div>\n\t\t\t\t\t{servers}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</TreeNode>\n\t);\n}","import React, {useEffect, useState} from \"react\";\nimport {DataLoader} from \"../../models/data-loader\";\nimport {DataCenter} from \"../../models/items/data-center\";\nimport {DataCenterView} from \"../data-center\";\nimport './style.scss';\n\nexport function InfraTree(props: {hiddenNodesCount: number}): JSX.Element {\n\tconst [dataCenters, setDataCenters] = useState([] as DataCenter[]);\n\n\tuseEffect(() => {\n\t\tnew DataLoader()\n\t\t\t.loadByUrl('data/data.xml')\n\t\t\t.then((loader: DataLoader) => {\n\t\t\t\tsetDataCenters(loader.dataCenters);\n\t\t\t});\n\t}, []);\n\n\tconst dcs = dataCenters.map((dataCenter) => {\n\t\treturn (\n\t\t\t<DataCenterView key={dataCenter.toString()} model={dataCenter}/>\n\t\t);\n\t});\n\n\treturn (\n\t\t<div className=\"infra-tree\">\n\t\t\t<div className=\"infra-tree__search-stat\"\n\t\t\t     hidden={props.hiddenNodesCount === 0}>Hidden nodes: {props.hiddenNodesCount}</div>\n\t\t\t<div className=\"infra-tree__data-centers\">{dcs}</div>\n\t\t</div>\n\t)\n}","import \"./style.scss\";\r\nimport {SvgIcon} from \"../svg-icon\";\r\nimport {FilterContext, FilterContextCollapseToType, FilterContextType} from \"./context\";\r\nimport {useContext} from \"react\";\r\n\r\nexport function FilterBar(props: {setHiddenNodesCount: (v: number) => void}): JSX.Element {\r\n\tconst context: FilterContextType = useContext(FilterContext);\r\n\tlet inputEl: HTMLInputElement;\r\n\treturn (\r\n\t\t<div className=\"filter-bar\">\r\n\t\t\t<label className=\"filter-bar__caption\" htmlFor=\"search-input\">Search: </label>\r\n\t\t\t<input ref={el => inputEl = el as HTMLInputElement} className=\"filter-bar__search\" id=\"search-input\"\r\n\t\t\t       type=\"text\"\r\n\t\t\t       autoComplete={'off'}\r\n\t\t\t       onKeyUp={(event) =>\r\n\t\t\t\t       props.setHiddenNodesCount(filterNodesByText(inputEl.value))\r\n\t\t\t       }\r\n\t\t\t       placeholder=\"Name, ip, port etc...\"/>\r\n\t\t\t<div className=\"filter-bar__button filter-bar__button_cancel\"\r\n\t\t\t     onClick={() => props.setHiddenNodesCount(filterNodesByText(inputEl.value = ''))}>\r\n\t\t\t\t<SvgIcon name=\"cancel\"/>\r\n\t\t\t</div>\r\n\t\t\t<label className=\"filter-bar__caption\">Collapse to: </label>\r\n\t\t\t<div className=\"filter-bar__button filter-bar__button_dc\" onClick={() => {\r\n\t\t\t\tcontext.setCollapseTo(FilterContextCollapseToType.DATA_CENTER);\r\n\t\t\t}}>\r\n\t\t\t\t<SvgIcon name=\"data-center\"/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"filter-bar__button filter-bar__button_srv\" onClick={() => {\r\n\t\t\t\tcontext.setCollapseTo(FilterContextCollapseToType.SERVER);\r\n\t\t\t}}>\r\n\t\t\t\t<SvgIcon name=\"server\"/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"filter-bar__button filter-bar__button_vm\" onClick={() => {\r\n\t\t\t\tcontext.setCollapseTo(FilterContextCollapseToType.VIRTUAL_MACHINE);\r\n\t\t\t}}>\r\n\t\t\t\t<SvgIcon name=\"vm\"/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"filter-bar__button filter-bar__button_service\" onClick={() => {\r\n\t\t\t\tcontext.setCollapseTo(FilterContextCollapseToType.SERVICE);\r\n\t\t\t}}>\r\n\t\t\t\t<SvgIcon name=\"service\"/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nfunction filterNodesByText(search: string): number {\r\n\tsearch = search.replace(/[\"'[\\]]/g, '').toLowerCase();\r\n\tconst allEls: NodeListOf<Element> = document.querySelectorAll(`.infra-tree-node`);\r\n\r\n\tif (search === '') {\r\n\t\tallEls.forEach(el => {\r\n\t\t\t(el as HTMLElement).hidden = false;\r\n\t\t});\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tlet hiddenNodes: number = 0;\r\n\tallEls.forEach((el) => {\r\n\t\tconst htmlEl: HTMLElement = el as HTMLElement;\r\n\t\tconst text: string = htmlEl.dataset.search as string;\r\n\t\thtmlEl.hidden = !text.includes(search);\r\n\r\n\t\tif (htmlEl.hidden) {\r\n\t\t\thiddenNodes++;\r\n\t\t}\r\n\t});\r\n\r\n\treturn hiddenNodes;\r\n}","import React, {useState} from \"react\";\nimport {InfraTree} from \"./infra-tree/infra-tree\";\nimport './style/index.scss';\nimport {FilterBar} from \"./filter-bar\";\nimport {FilterContextProvider} from \"./filter-bar/context\";\n\nexport function App() {\n\tconst [hiddenNodesCount, setHiddenNodesCount] = useState(0);\n\treturn (\n\t\t<FilterContextProvider>\n\t\t\t<FilterBar setHiddenNodesCount={setHiddenNodesCount}/>\n\t\t\t<InfraTree hiddenNodesCount={hiddenNodesCount}/>\n\t\t</FilterContextProvider>\n\t);\n}","import React, {StrictMode} from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from \"./components/app\";\n\nReactDOM.render(\n    <StrictMode>\n        <App />\n    </StrictMode>,\n    document.getElementById('root')\n)"],"sourceRoot":""}