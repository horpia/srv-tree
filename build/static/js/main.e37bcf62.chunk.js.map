{"version":3,"sources":["models/items/abstract-tree-node.ts","models/items/service.ts","components/connector/index.tsx","models/items/virtual-machine.ts","models/items/server.ts","models/items/data-center.ts","models/data-loader.ts","components/svg-icon/icons.svg","components/svg-icon/elasticsearch.svg","components/svg-icon/apache.svg","components/svg-icon/mssql.svg","components/svg-icon/db2.svg","components/svg-icon/ruby.svg","components/svg-icon/index.tsx","components/arrow-button/index.tsx","components/node-label/index.tsx","components/infra-tree-node/index.tsx","components/service/index.tsx","components/property/index.tsx","components/virtual-machine/index.tsx","components/server/index.tsx","components/data-center/index.tsx","components/filter-bar/helpers.ts","components/infra-tree/infra-tree.tsx","components/filter-bar/index.tsx","components/app.tsx","index.tsx"],"names":["AbstractTreeNode","el","name","desc","id","selfSearchStringCache","nestedSearchStringCache","this","getAttribute","querySelector","innerHTML","sequence","selector","list","querySelectorAll","forEach","push","textContent","trim","getSelfTextToSearch","toLowerCase","split","filter","v","i","arr","indexOf","join","replace","trimEnd","getNestedTextToSearch","toSelfSearchString","toNestedSearchString","ConnectionType","Service","type","globalAddr","localAddr","port","parseInt","getElementsTextBySelector","VirtualMachine","ip","services","cpu","ram","disk","os","map","vm","toSearchString","Server","vms","DataCenter","servers","srv","DataLoader","data","dataCenters","url","fetch","cache","text","xml","DOMParser","parseFromString","urlParts","pop","relUrl","loaders","Promise","resolve","a","parentElement","firstElementChild","replaceChild","all","splice","length","ConnectorView","props","className","caption","wrapArray","lines","toString","supportedIcons","imgFiles","elasticSearchIcon","apacheIcon","mssqlIcon","db2Icon","rubyIcon","SvgIcon","includes","src","alt","xmlns","xmlnsXlink","href","icons","ArrowButton","hidden","isOpen","NodeLabel","useState","showInfo","setShowInfo","classes","isEmpty","style","maxLines","children","onClick","setOpenState","icon","TreeNode","data-search","searchText","ServiceView","isRoot","ROOT_SERVICE","SERVICE","Math","max","model","PropertiesGroup","Property","value","VirtualMachineView","service","VM","ServerView","LAN","dangerouslySetInnerHTML","__html","DataCenterView","vmsCount","server","WAN","jumpToPrevNode","baseY","window","innerHeight","document","documentElement","clientHeight","minDist","Number","MAX_VALUE","bestEl","getBoundingClientRect","dist","y","height","scrollIntoView","behavior","block","jumpToNextNode","pageHeight","InfraTree","setDataCenters","useEffect","loadByUrl","then","loader","dcs","dataCenter","TREE_NODES_ORDER","FilterBar","inputEl","htmlFor","ref","autoFocus","autoComplete","onKeyUp","event","keyEvent","code","search","handleKeyUp","placeholder","collapse","ownContent","classList","remove","matched","firstMatched","label","add","parent","closest","updateStat","matchedCount","statEl","counter","String","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e37bcf62.chunk.js","sourcesContent":["export abstract class AbstractTreeNode {\n\treadonly name: string;\n\treadonly desc: string;\n\n\tprotected el: Element;\n\n\tprivate static sequence: number = 0;\n\tprivate readonly id: string;\n\tprivate selfSearchStringCache: string = '';\n\tprivate nestedSearchStringCache: string = '';\n\n\tprotected constructor(el: Element) {\n\t\tthis.el = el;\n\t\tthis.name = el.getAttribute('name') || '';\n\t\tthis.desc = el.querySelector(':scope > desc')?.innerHTML || '';\n\t\tthis.id = new.target.name + ':' + this.name + '@' + (++AbstractTreeNode.sequence);\n\t}\n\n\tprotected abstract getNestedTextToSearch(): string;\n\n\tprotected getSelfTextToSearch(): string {\n\t\treturn this.name + ' ' + this.desc;\n\t}\n\n\tprotected getElementsTextBySelector(selector: string): string[] {\n\t\tconst list: string[] = [];\n\t\tthis.el.querySelectorAll(selector).forEach(el => {\n\t\t\tlist.push((el?.textContent || '').trim());\n\t\t});\n\n\t\treturn list;\n\t}\n\n\ttoSelfSearchString(): string {\n\t\tif (this.selfSearchStringCache !== '') {\n\t\t\treturn this.selfSearchStringCache;\n\t\t}\n\n\t\tthis.selfSearchStringCache = this.name + ' ' + this.desc + ' ' + this.getSelfTextToSearch();\n\t\tthis.selfSearchStringCache = this.selfSearchStringCache.toLowerCase().split(' ')\n\t\t\t.filter((v: string, i: number, arr: string[]) => {\n\t\t\t\treturn i === arr.indexOf(v);\n\t\t\t})\n\t\t\t.join(' ')\n\t\t\t.replace(/\\s+/g, ' ')\n\t\t\t.trimEnd();\n\n\t\treturn this.selfSearchStringCache;\n\t}\n\n\ttoNestedSearchString(): string {\n\t\tif (this.nestedSearchStringCache !== '') {\n\t\t\treturn this.nestedSearchStringCache;\n\t\t}\n\n\t\tthis.nestedSearchStringCache = this.getNestedTextToSearch();\n\t\tthis.nestedSearchStringCache = this.nestedSearchStringCache.toLowerCase().split(' ')\n\t\t\t.filter((v: string, i: number, arr: string[]) => {\n\t\t\t\treturn i === arr.indexOf(v);\n\t\t\t})\n\t\t\t.join(' ')\n\t\t\t.replace(/\\s+/g, ' ')\n\t\t\t.trimEnd();\n\n\t\treturn this.nestedSearchStringCache;\n\t}\n\n\ttoSearchString(): string {\n\t\treturn this.toSelfSearchString() + ' ' + this.toNestedSearchString();\n\t}\n\n\ttoString(): string {\n\t\treturn this.id;\n\t}\n}","import {AbstractTreeNode} from \"./abstract-tree-node\";\n\nexport class Service extends AbstractTreeNode {\n\treadonly type: string;\n\treadonly globalAddr: string[] = [];\n\treadonly localAddr: string[] = [];\n\treadonly port: number;\n\n\tconstructor(el: Element) {\n\t\tsuper(el);\n\t\tthis.type = el.getAttribute('type') || 'service';\n\t\tthis.port = parseInt(el.getAttribute('port') || '0', 10);\n\n\t\tthis.globalAddr = this.getElementsTextBySelector(':scope > global-addr');\n\t\tthis.localAddr = this.getElementsTextBySelector(':scope > local-addr');\n\t}\n\n\tprotected getSelfTextToSearch(): string {\n\t\treturn this.type\n\t\t\t+ ' ' + this.localAddr.join(',')\n\t\t\t+ ' ' + this.globalAddr.join(',')\n\t\t\t+ ' ' + this.port;\n\t}\n\n\tprotected getNestedTextToSearch(): string {\n\t\treturn '';\n\t}\n}","import React from \"react\";\nimport \"./style.scss\";\n\nexport enum ConnectionType {\n\tLAN = 'lan',\n\tWAN = 'wan',\n\tVM = 'vm',\n\tROOT_SERVICE = 'root-service',\n\tSERVICE = 'service',\n}\n\ntype ConnectorViewType = {\n\ttype: ConnectionType,\n\tcaption?: string,\n\tip?: string[],\n\tlocalAddr?: string[],\n\tglobalAddr?: string[]\n}\n\nexport function ConnectorView(props: ConnectorViewType): JSX.Element {\n\treturn (\n\t\t<div className={'connector connector_' + props.type}>\n\t\t\t<div className=\"connector__v-line\"/>\n\t\t\t<div className=\"connector__connection\">\n\t\t\t\t<div className=\"connector__point\"/>\n\t\t\t\t<div className=\"connector__h-line\">\n\t\t\t\t\t<div className=\"connector__caption\">{props.caption || wrapArray(props.ip || [])}</div>\n\t\t\t\t</div>\n\t\t\t\t{props.globalAddr && props.globalAddr.length > 0\n\t\t\t\t\t?\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div className=\"connector__wan-point\"/>\n\t\t\t\t\t\t<div className=\"connector__wan-line\">\n\t\t\t\t\t\t\t<div className=\"connector__wan-caption\">{wrapArray(props.globalAddr || [])}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t\t: null\n\t\t\t\t}\n\t\t\t\t{props.localAddr && props.localAddr.length > 0\n\t\t\t\t\t?\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div className=\"connector__lan-point\"/>\n\t\t\t\t\t\t<div className=\"connector__lan-line\">\n\t\t\t\t\t\t\t<div className=\"connector__lan-caption\">{wrapArray(props.localAddr || [])}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t\t: null\n\t\t\t\t}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nfunction wrapArray(lines: string[]): React.ReactNode {\n\treturn lines.map((v: string, i: number) => <div key={i.toString()}>{v}</div>);\n}","import {Service} from \"./service\";\nimport {AbstractTreeNode} from \"./abstract-tree-node\";\n\nexport class VirtualMachine extends AbstractTreeNode {\n\treadonly ip: string[] = [];\n\treadonly globalAddr: string[] = [];\n\treadonly localAddr: string[] = [];\n\treadonly services: Service[];\n\treadonly cpu: string;\n\treadonly ram: string;\n\treadonly disk: string;\n\treadonly os: string;\n\n\tconstructor(el: Element) {\n\t\tsuper(el);\n\t\tthis.ip = this.getElementsTextBySelector(':scope > ip');\n\t\tthis.globalAddr = this.getElementsTextBySelector(':scope > global-addr');\n\t\tthis.localAddr = this.getElementsTextBySelector(':scope > local-addr');\n\t\tthis.services = [];\n\n\t\tthis.cpu = el.querySelector(':scope > cpu')?.textContent || '';\n\t\tthis.ram = el.querySelector(':scope > ram')?.textContent || '';\n\t\tthis.disk = el.querySelector(':scope > disk')?.textContent || '';\n\t\tthis.os = el.querySelector(':scope > os')?.textContent || '';\n\n\t\tel.querySelectorAll(':scope > service').forEach(el => {\n\t\t\tthis.services.push(new Service(el));\n\t\t});\n\t}\n\n\tprotected getSelfTextToSearch(): string {\n\t\treturn this.ip.join(',')\n\t\t\t+ ' ' + this.localAddr.join(',')\n\t\t\t+ ' ' + this.globalAddr.join(',');\n\t}\n\n\tprotected getNestedTextToSearch(): string {\n\t\treturn this.services.map(vm => vm.toSearchString()).join(' ');\n\t}\n}","import {VirtualMachine} from \"./virtual-machine\";\nimport {Service} from \"./service\";\nimport {AbstractTreeNode} from \"./abstract-tree-node\";\n\nexport class Server extends AbstractTreeNode {\n\treadonly ip: string[] = [];\n\treadonly globalAddr: string[] = [];\n\treadonly localAddr: string[] = [];\n\treadonly cpu: string;\n\treadonly ram: string;\n\treadonly disk: string;\n\treadonly os: string;\n\treadonly vms: VirtualMachine[] = [];\n\treadonly services: Service[] = [];\n\n\tconstructor(el: Element) {\n\t\tsuper(el);\n\t\tthis.ip = this.getElementsTextBySelector(':scope > ip');\n\t\tthis.globalAddr = this.getElementsTextBySelector(':scope > global-addr');\n\t\tthis.localAddr = this.getElementsTextBySelector(':scope > local-addr');\n\n\t\tthis.cpu = el.querySelector(':scope > cpu')?.textContent || '';\n\t\tthis.ram = el.querySelector(':scope > ram')?.textContent || '';\n\t\tthis.disk = el.querySelector(':scope > disk')?.textContent || '';\n\t\tthis.os = el.querySelector(':scope > os')?.textContent || '';\n\n\t\tel.querySelectorAll(':scope > vm').forEach(el => {\n\t\t\tthis.vms.push(new VirtualMachine(el));\n\t\t});\n\n\t\tel.querySelectorAll(':scope > service').forEach(el => {\n\t\t\tthis.services.push(new Service(el));\n\t\t});\n\t}\n\n\tprotected getSelfTextToSearch(): string {\n\t\treturn this.ip.join(',')\n\t\t\t+ ' ' + this.localAddr.join(',')\n\t\t\t+ ' ' + this.globalAddr.join(',')\n\t\t\t+ ' ' + this.cpu\n\t\t\t+ ' ' + this.os;\n\t}\n\n\tprotected getNestedTextToSearch(): string {\n\t\treturn this.vms.map(vm => vm.toSearchString()).join(' ')\n\t\t\t+ ' ' + this.services.map(vm => vm.toSearchString()).join(' ');\n\t}\n}","import {Server} from \"./server\";\nimport {AbstractTreeNode} from \"./abstract-tree-node\";\n\nexport class DataCenter extends AbstractTreeNode {\n\treadonly servers: Server[];\n\n\tconstructor(el: Element) {\n\t\tsuper(el);\n\t\tthis.servers = [];\n\n\t\tel.querySelectorAll(':scope > srv').forEach(el => {\n\t\t\tthis.servers.push(new Server(el));\n\t\t});\n\t}\n\n\tprotected getNestedTextToSearch(): string {\n\t\treturn this.servers.map(srv => srv.toSearchString()).join(' ');\n\t}\n}","import {DataCenter} from \"./items/data-center\";\n\nexport class DataLoader {\n\tprivate data?: XMLDocument;\n\treadonly dataCenters: DataCenter[] = [];\n\n\tasync loadByUrl(url: string): Promise<DataLoader> {\n\t\tconst xml: string = await (await fetch(url, {cache: 'no-cache'})).text();\n\t\tthis.data = new DOMParser().parseFromString(xml, 'application/xml');\n\n\t\tconst urlParts: string[] = url.split('/');\n\t\turlParts.pop();\n\t\tconst relUrl: string = urlParts.join('/');\n\t\tconst loaders: Promise<void>[] = [];\n\n\t\tthis.data.querySelectorAll('include[src]').forEach(el => {\n\t\t\tloaders.push(new Promise<void>(async resolve => {\n\t\t\t\tconst url: string = relUrl + '/' + el.getAttribute('src');\n\t\t\t\tconst xml: string = await (await fetch(url, {cache: 'no-cache'})).text();\n\t\t\t\tconst data = new DOMParser().parseFromString(xml, 'application/xml');\n\t\t\t\tif (el.parentElement && data.firstElementChild) {\n\t\t\t\t\tel.parentElement.replaceChild(data.firstElementChild, el);\n\t\t\t\t}\n\t\t\t\tresolve();\n\t\t\t}));\n\t\t});\n\n\t\tawait Promise.all(loaders);\n\n\t\tconst dataCenters: DataCenter[] = [];\n\t\tthis.data.querySelectorAll('infra > dc').forEach(el => {\n\t\t\tdataCenters.push(new DataCenter(el));\n\t\t});\n\t\tthis.dataCenters.splice(0, this.dataCenters.length, ...dataCenters);\n\t\treturn this;\n\t}\n}","export default __webpack_public_path__ + \"static/media/icons.f9e07b6a.svg\";","export default __webpack_public_path__ + \"static/media/elasticsearch.81e26c95.svg\";","export default __webpack_public_path__ + \"static/media/apache.ec3db90d.svg\";","export default __webpack_public_path__ + \"static/media/mssql.cfe2c656.svg\";","export default __webpack_public_path__ + \"static/media/db2.3d472d1d.svg\";","export default __webpack_public_path__ + \"static/media/ruby.320ed468.svg\";","import icons from \"./icons.svg\";\nimport elasticSearchIcon from \"./elasticsearch.svg\";\nimport apacheIcon from \"./apache.svg\";\nimport mssqlIcon from \"./mssql.svg\";\nimport db2Icon from \"./db2.svg\";\nimport rubyIcon from \"./ruby.svg\";\nimport \"./style.scss\";\n\nconst supportedIcons: string[] = [\n\t// Internal icons\n\t'server', 'vm', 'data-center', 'service', 'arrow', 'info', 'cancel',\n\n\t// Logo of services\n\t'php', 'php-fpm', 'nginx', 'redis', 'mysql', 'cassandra',\n\t'rabbitmq', 'sphinxsearch', 'elasticsearch', 'clickhouse',\n\t'docker', 'nodejs', 'kafka', 'cron', 'crontab', 'storage',\n\t'postgresql', 'mariadb', 'oracle', 'mongodb', 'apache', 'mssql',\n\t'db2', 'jenkins', 'consul', 'kibana', 'zabbix', 'ansible', 'graylog',\n\t'vault', 'java', 'python', 'ruby', 'perl'\n];\n\n\nconst imgFiles: Record<string, string> = {\n\t'elasticsearch': elasticSearchIcon,\n\t'apache': apacheIcon,\n\t'mssql': mssqlIcon,\n\t'db2': db2Icon,\n\t'ruby': rubyIcon,\n};\n\nexport function SvgIcon(props: {name: string, className?: string}): JSX.Element {\n\tlet name: string = props.name.toLowerCase();\n\tlet className: string = props.className || '';\n\n\tif (!supportedIcons.includes(name)) {\n\t\tname = 'service';\n\t}\n\n\tif (typeof imgFiles[name] === 'string') {\n\t\treturn (\n\t\t\t<img src={imgFiles[name]} alt=\"\" className={'icon ' + className}/>\n\t\t);\n\t}\n\n\treturn (\n\t\t<svg xmlns=\"http://www.w3.org/2000/svg\"\n\t\t     xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n\t\t     className={'icon ' + className}>\n\t\t\t<use href={`${icons}#${name}`}/>\n\t\t</svg>\n\t);\n}","import React from \"react\";\nimport \"./style.scss\";\nimport {SvgIcon} from \"../svg-icon\";\n\nexport function ArrowButton(props: {isOpen: boolean, hidden?: boolean}): JSX.Element {\n\treturn (\n\t\t<div className=\"arrow-button\" hidden={!!props.hidden}>\n\t\t\t<SvgIcon name=\"arrow\"\n\t\t\t         className={(props.isOpen ? 'icon_rot270' : 'icon_rot90') + ' icon_sm arrow-button__icon'}/>\n\t\t</div>\n\t);\n}","import \"./style.scss\";\nimport React, {useState} from \"react\";\nimport {SvgIcon} from \"../svg-icon\";\nimport {ArrowButton} from \"../arrow-button\";\n\nexport type NodeLabelType = {\n\ticon: string,\n\tname: string,\n\tsetOpenBySearchState?: (flag: any) => any,\n\tisEmpty: boolean,\n\tisOpen?: boolean,\n\tsetOpenState?: (el: any) => any,\n\tchildren?: React.ReactNode,\n\tmaxLines?: number\n}\n\nexport function NodeLabel(props: NodeLabelType): JSX.Element | null {\n\tconst [showInfo, setShowInfo] = useState(false);\n\tlet classes: string[] = ['node-label'];\n\n\tif (showInfo) {\n\t\tclasses.push('node-label_show-info');\n\t}\n\n\tif (props.isEmpty) {\n\t\tclasses.push('node-label_empty');\n\t}\n\n\tconst toggleState: () => void = () => {\n\t\tif (!props.setOpenState) {\n\t\t\treturn;\n\t\t}\n\n\t\tprops.setOpenState(!props.isOpen);\n\t};\n\n\treturn (\n\t\t<div className={classes.join(' ')} style={{'--lines': props.maxLines || 0} as React.CSSProperties}>\n\t\t\t<div className=\"node-label__info\">{props.children}</div>\n\t\t\t<div className=\"node-label__buttons-group\">\n\t\t\t\t<div className=\"node-label__button\"\n\t\t\t\t     onClick={toggleState}>\n\t\t\t\t\t<SvgIcon name={props.icon}/>\n\t\t\t\t\t<ArrowButton isOpen={props.isOpen || false} hidden={props.isEmpty}/>\n\t\t\t\t\t<div className=\"node-label__name\">{props.name}</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"node-label__info-button\" onClick={() => setShowInfo(!showInfo)}>\n\t\t\t\t\t<SvgIcon name=\"info\"/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"node-label__v-line\"/>\n\t\t</div>\n\t);\n}","import React from \"react\";\nimport \"./style.scss\";\n\nexport function TreeNode(props: {searchText: string, className: string, children: React.ReactNode}): JSX.Element {\n\treturn (\n\t\t<div data-search={props.searchText.toLowerCase()}\n\t\t     className={'infra-tree-node ' + props.className}>{props.children}</div>\n\t);\n}","import React from \"react\";\nimport \"./style.scss\";\nimport {Service} from \"../../models/items/service\";\nimport {ConnectionType, ConnectorView} from \"../connector\";\nimport {NodeLabel} from \"../node-label\";\nimport {TreeNode} from \"../infra-tree-node\";\n\nexport function ServiceView(props: {model: Service, isRoot?: boolean}): JSX.Element | null {\n\tconst type = props.isRoot ? ConnectionType.ROOT_SERVICE : ConnectionType.SERVICE;\n\n\tconst maxLines: number = Math.max(\n\t\tprops.model.globalAddr?.length || 0,\n\t\tprops.model.localAddr?.length || 0\n\t);\n\n\treturn (\n\t\t<TreeNode className=\"service\" searchText={props.model.toSelfSearchString()}>\n\t\t\t<ConnectorView type={type} caption={props.model.port > 0 ? ':' + props.model.port : ''}\n\t\t\t               globalAddr={props.model.globalAddr}\n\t\t\t               localAddr={props.model.localAddr}/>\n\t\t\t<div className=\"service__body\">\n\t\t\t\t<NodeLabel icon={props.model.type} name={props.model.name || props.model.type}\n\t\t\t\t           isEmpty={true} maxLines={maxLines}>{props.model.desc}</NodeLabel>\n\t\t\t</div>\n\t\t</TreeNode>\n\t);\n}","import React from \"react\";\nimport \"./style.scss\";\n\nexport function PropertiesGroup(props: {children: React.ReactNode}): JSX.Element {\n\treturn (\n\t\t<div className=\"properties-group\">\n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\nexport function Property(props: {caption: string, value: string | number}): JSX.Element {\n\treturn (\n\t\t<div className=\"property\">\n\t\t\t<span className=\"property__caption\">{props.caption}:</span>\n\t\t\t<span className=\"property__value\">{props.value}</span>\n\t\t</div>\n\t);\n}","import React, {useState} from \"react\";\nimport \"./style.scss\";\nimport {VirtualMachine} from \"../../models/items/virtual-machine\";\nimport {ServiceView} from \"../service\";\nimport {ConnectionType, ConnectorView} from \"../connector\";\nimport {NodeLabel} from \"../node-label\";\nimport {TreeNode} from \"../infra-tree-node\";\nimport {PropertiesGroup, Property} from \"../property\";\n\nexport function VirtualMachineView(props: {model: VirtualMachine}): JSX.Element | null {\n\tconst [isOpen, setOpenState] = useState(true);\n\n\tconst services: JSX.Element[] = props.model.services.map(service => {\n\t\treturn (\n\t\t\t<ServiceView key={service.toString()} model={service}/>\n\t\t);\n\t});\n\n\tconst isEmpty: boolean = services.length === 0;\n\n\tconst maxLines: number = Math.max(\n\t\tprops.model.ip?.length || 0,\n\t\tprops.model.globalAddr?.length || 0,\n\t\tprops.model.localAddr?.length || 0\n\t);\n\n\treturn (\n\t\t<TreeNode className=\"vm\" searchText={props.model.toSelfSearchString()}>\n\t\t\t<ConnectorView type={ConnectionType.VM} ip={props.model.ip} globalAddr={props.model.globalAddr}\n\t\t\t               localAddr={props.model.localAddr}/>\n\t\t\t<div className=\"vm__body\">\n\t\t\t\t<NodeLabel icon={'vm'} name={props.model.name} isEmpty={isEmpty} isOpen={isOpen}\n\t\t\t\t           setOpenState={setOpenState} maxLines={maxLines}>\n\t\t\t\t\t<PropertiesGroup>\n\t\t\t\t\t\t<Property caption={'CPU'} value={props.model.cpu}/>\n\t\t\t\t\t\t<Property caption={'RAM'} value={props.model.ram}/>\n\t\t\t\t\t\t<Property caption={'Disk'} value={props.model.disk}/>\n\t\t\t\t\t\t<Property caption={'OS'} value={props.model.os}/>\n\t\t\t\t\t</PropertiesGroup>\n\t\t\t\t\t{props.model.desc}\n\t\t\t\t</NodeLabel>\n\t\t\t\t<div className=\"vm__content\" hidden={!isOpen}>\n\t\t\t\t\t{services}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</TreeNode>\n\t);\n}","import React, {useState} from \"react\";\nimport \"./style.scss\";\nimport {Server} from \"../../models/items/server\";\nimport {VirtualMachineView} from \"../virtual-machine\";\nimport {ServiceView} from \"../service\";\nimport {ConnectionType, ConnectorView} from \"../connector\";\nimport {NodeLabel} from \"../node-label\";\nimport {PropertiesGroup, Property} from \"../property\";\nimport {TreeNode} from \"../infra-tree-node\";\n\nexport function ServerView(props: {model: Server}): JSX.Element | null {\n\tconst [isOpen, setOpenState] = useState(true);\n\n\tconst vms: JSX.Element[] = props.model.vms.map(vm => {\n\t\treturn (\n\t\t\t<VirtualMachineView key={vm.toString()} model={vm}/>\n\t\t);\n\t});\n\n\tconst services: JSX.Element[] = props.model.services.map(service => {\n\t\treturn (\n\t\t\t<ServiceView key={service.toString()} isRoot={true} model={service}/>\n\t\t);\n\t});\n\n\tconst isEmpty: boolean = services.length === 0 && vms.length === 0;\n\tconst maxLines: number = Math.max(\n\t\tprops.model.ip?.length || 0,\n\t\tprops.model.globalAddr?.length || 0,\n\t\tprops.model.localAddr?.length || 0\n\t);\n\n\treturn (\n\t\t<TreeNode className=\"server\" searchText={props.model.toSelfSearchString()}>\n\t\t\t<ConnectorView type={ConnectionType.LAN} ip={props.model.ip} globalAddr={props.model.globalAddr}\n\t\t\t               localAddr={props.model.localAddr}/>\n\t\t\t<div className=\"server__body\">\n\t\t\t\t<NodeLabel icon={'server'} name={props.model.name} isEmpty={isEmpty} isOpen={isOpen}\n\t\t\t\t           setOpenState={setOpenState} maxLines={maxLines}>\n\t\t\t\t\t<PropertiesGroup>\n\t\t\t\t\t\t<Property caption={'CPU'} value={props.model.cpu}/>\n\t\t\t\t\t\t<Property caption={'RAM'} value={props.model.ram}/>\n\t\t\t\t\t\t<Property caption={'Disk'} value={props.model.disk}/>\n\t\t\t\t\t\t<Property caption={'OS'} value={props.model.os}/>\n\t\t\t\t\t</PropertiesGroup>\n\t\t\t\t\t<div dangerouslySetInnerHTML={{__html: props.model.desc}}/>\n\t\t\t\t</NodeLabel>\n\t\t\t\t<div className=\"server__content\" hidden={!isOpen}>\n\t\t\t\t\t{services}\n\t\t\t\t\t{vms}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</TreeNode>\n\t);\n}","import React, {useState} from \"react\";\nimport \"./style.scss\";\nimport {DataCenter} from \"../../models/items/data-center\";\nimport {ServerView} from \"../server\";\nimport {ConnectionType, ConnectorView} from \"../connector\";\nimport {NodeLabel} from \"../node-label\";\nimport {PropertiesGroup, Property} from \"../property\";\nimport {TreeNode} from \"../infra-tree-node\";\n\nexport function DataCenterView(props: {model: DataCenter}): JSX.Element | null {\n\tconst [isOpen, setOpenState] = useState(true);\n\n\tlet vmsCount: number = 0;\n\tconst servers: JSX.Element[] = props.model.servers.map(server => {\n\t\tvmsCount += server.vms.length;\n\t\treturn (\n\t\t\t<ServerView key={server.toString()} model={server}/>\n\t\t);\n\t});\n\n\tconst isEmpty: boolean = servers.length === 0;\n\n\treturn (\n\t\t<TreeNode className=\"data-center\" searchText={props.model.toSelfSearchString()}>\n\t\t\t<ConnectorView type={ConnectionType.WAN}/>\n\t\t\t<div className=\"data-center__wan-label\">WAN</div>\n\t\t\t<div className=\"data-center__body\">\n\t\t\t\t<NodeLabel icon={'data-center'} name={props.model.name} isEmpty={isEmpty} isOpen={isOpen}\n\t\t\t\t           setOpenState={setOpenState}>\n\t\t\t\t\t<PropertiesGroup>\n\t\t\t\t\t\t<Property caption={'Servers'} value={servers.length}/>\n\t\t\t\t\t\t<Property caption={'VMs'} value={vmsCount}/>\n\t\t\t\t\t</PropertiesGroup>\n\t\t\t\t\t<div>{props.model.desc}</div>\n\t\t\t\t</NodeLabel>\n\t\t\t\t<div className=\"data-center__content\" hidden={!isOpen}>\n\t\t\t\t\t<div className=\"data-center__lan-label\">LAN</div>\n\t\t\t\t\t{servers}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</TreeNode>\n\t);\n}","export function jumpToPrevNode(): void {\n\tconst pageHeight = window.innerHeight || document.documentElement.clientHeight;\n\tconst baseY: number = pageHeight >> 2;\n\tlet minDist: number = -Number.MAX_VALUE, bestEl: HTMLElement | null = null;\n\n\tdocument.querySelectorAll<HTMLElement>('.node-label_matched').forEach(el => {\n\t\tconst {y, height} = el.getBoundingClientRect();\n\t\tconst dist: number = (y + height) - baseY;\n\t\tif (dist < 0 && minDist < dist) {\n\t\t\tbestEl = el;\n\t\t\tminDist = dist;\n\t\t}\n\t});\n\n\tif (bestEl) {\n\t\t(bestEl as HTMLElement).querySelector('.node-label__buttons-group')\n\t\t\t?.scrollIntoView({behavior: \"smooth\", block: \"center\"});\n\t}\n}\n\nexport function jumpToNextNode(): void {\n\tconst pageHeight = window.innerHeight || document.documentElement.clientHeight;\n\tconst baseY: number = (pageHeight >> 1) + (pageHeight >> 2);\n\tlet minDist: number = Number.MAX_VALUE, bestEl: HTMLElement | null = null;\n\n\tdocument.querySelectorAll<HTMLElement>('.node-label_matched').forEach(el => {\n\t\tconst {y} = el.getBoundingClientRect();\n\t\tconst dist: number = y - baseY;\n\t\tif (dist > 0 && minDist > dist) {\n\t\t\tbestEl = el;\n\t\t\tminDist = dist;\n\t\t}\n\t});\n\n\tif (bestEl) {\n\t\t(bestEl as HTMLElement).querySelector('.node-label__buttons-group')\n\t\t\t?.scrollIntoView({behavior: \"smooth\", block: \"center\"});\n\t}\n}\n\n","import React, {useEffect, useState} from \"react\";\nimport {DataLoader} from \"../../models/data-loader\";\nimport {DataCenter} from \"../../models/items/data-center\";\nimport {DataCenterView} from \"../data-center\";\nimport './style.scss';\nimport {jumpToNextNode, jumpToPrevNode} from \"../filter-bar/helpers\";\n\nexport function InfraTree(): JSX.Element {\n\tconst [dataCenters, setDataCenters] = useState([] as DataCenter[]);\n\tconst classes = ['infra-tree'];\n\n\tuseEffect(() => {\n\t\tnew DataLoader()\n\t\t\t.loadByUrl('data/data.xml')\n\t\t\t.then((loader: DataLoader) => {\n\t\t\t\tsetDataCenters(loader.dataCenters);\n\t\t\t});\n\t}, []);\n\n\tconst dcs = dataCenters.map((dataCenter) => {\n\t\treturn (\n\t\t\t<DataCenterView key={dataCenter.toString()} model={dataCenter}/>\n\t\t);\n\t});\n\n\treturn (\n\t\t<div className={classes.join(' ')}>\n\t\t\t<div className=\"infra-tree__search-stat\" hidden={true}>\n\t\t\t\tMatched nodes: <span>0</span>\n\t\t\t\t<button onClick={() => jumpToPrevNode()}>⭡ Prev</button>\n\t\t\t\t<button onClick={() => jumpToNextNode()}>⭣ Next</button>\n\t\t\t</div>\n\t\t\t<div className=\"infra-tree__data-centers\">{dcs}</div>\n\t\t</div>\n\t)\n}\n","import \"./style.scss\";\nimport {SvgIcon} from \"../svg-icon\";\nimport {jumpToNextNode, jumpToPrevNode} from \"../filter-bar/helpers\";\n\nconst TREE_NODES_ORDER: string[] = ['data-center', 'server', 'vm', 'service'];\n\nexport function FilterBar(): JSX.Element {\n\tlet inputEl: HTMLInputElement;\n\treturn (\n\t\t<div className=\"filter-bar\">\n\t\t\t<label className=\"filter-bar__caption\" htmlFor=\"search-input\">Search: </label>\n\t\t\t<input ref={el => inputEl = el as HTMLInputElement} className=\"filter-bar__search\" id=\"search-input\"\n\t\t\t       type=\"text\"\n\t\t\t       autoFocus={true}\n\t\t\t       autoComplete={'off'}\n\t\t\t       onKeyUp={(event) => handleKeyUp(event, inputEl)}\n\t\t\t       placeholder=\"Name, ip, port etc...\"/>\n\t\t\t<div className=\"filter-bar__button filter-bar__button_cancel\"\n\t\t\t     onClick={() => search(inputEl.value = '')}>\n\t\t\t\t<SvgIcon name=\"cancel\"/>\n\t\t\t</div>\n\t\t\t<label className=\"filter-bar__caption\">Collapse to: </label>\n\t\t\t<div className=\"filter-bar__button filter-bar__button_dc\" onClick={() => collapse('data-center')}>\n\t\t\t\t<SvgIcon name=\"data-center\"/>\n\t\t\t</div>\n\t\t\t<div className=\"filter-bar__button filter-bar__button_srv\" onClick={() => collapse('server')}>\n\t\t\t\t<SvgIcon name=\"server\"/>\n\t\t\t</div>\n\t\t\t<div className=\"filter-bar__button filter-bar__button_vm\" onClick={() => collapse('vm')}>\n\t\t\t\t<SvgIcon name=\"vm\"/>\n\t\t\t</div>\n\t\t\t<div className=\"filter-bar__button filter-bar__button_service\" onClick={() => collapse('service')}>\n\t\t\t\t<SvgIcon name=\"service\"/>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nfunction collapse(type: string): void {\n\tdocument.querySelectorAll(`.${type}`).forEach(el => {\n\t\tconst ownContent: HTMLElement | null = el.querySelector(`:scope > .${type}__body > .${type}__content`);\n\t\tif (ownContent) {\n\t\t\townContent.hidden = true;\n\t\t}\n\t});\n\n\tfor (let i: number = TREE_NODES_ORDER.indexOf(type) - 1; i >= 0; i--) {\n\t\tconst type: string = TREE_NODES_ORDER[i];\n\t\tdocument.querySelectorAll<HTMLElement>(`.${type}__content`).forEach((el: HTMLElement) => {\n\t\t\tel.hidden = false;\n\t\t});\n\t}\n}\n\nfunction handleKeyUp(event: any, inputEl: HTMLInputElement): void {\n\tconst keyEvent: KeyboardEvent = event as KeyboardEvent;\n\tif (keyEvent.code === 'Escape') {\n\t\tinputEl.value = '';\n\t\tsearch('');\n\t\treturn;\n\t}\n\n\tif (keyEvent.code === 'ArrowUp') {\n\t\tjumpToPrevNode();\n\t\treturn;\n\t}\n\n\tif (keyEvent.code === 'ArrowDown') {\n\t\tjumpToNextNode();\n\t\treturn;\n\t}\n\n\tsearch(inputEl.value);\n}\n\nfunction search(text: string): void {\n\ttext = text.replace(/[\"'[\\]]/g, '').toLowerCase();\n\n\tdocument.querySelectorAll('.node-label_matched').forEach(el => {\n\t\tel.classList.remove('node-label_matched');\n\t});\n\n\tif (text === '') {\n\t\tupdateStat();\n\t\treturn;\n\t}\n\n\tlet matched: number = 0;\n\tlet firstMatched: HTMLElement | null = null;\n\n\tdocument.querySelectorAll<HTMLElement>(`.infra-tree-node[data-search*=\"${text}\"]`).forEach((el: HTMLElement) => {\n\t\tconst label: HTMLElement | null = el.querySelector(`:scope .node-label`);\n\t\tif (label) {\n\t\t\tlabel.classList.add('node-label_matched');\n\t\t\tif (!firstMatched) {\n\t\t\t\tfirstMatched = label;\n\t\t\t}\n\t\t\tmatched++;\n\t\t}\n\n\t\tfor (const type of TREE_NODES_ORDER) {\n\t\t\tconst parent: HTMLElement | null = el.closest<HTMLElement>(`.${type}__content`);\n\t\t\tif (parent) {\n\t\t\t\tparent.hidden = false;\n\t\t\t}\n\t\t}\n\t});\n\n\tif (firstMatched) {\n\t\t(firstMatched as HTMLElement).querySelector('.node-label__buttons-group')\n\t\t\t?.scrollIntoView({block: \"center\", behavior: \"smooth\"});\n\t}\n\n\tupdateStat(matched);\n}\n\nfunction updateStat(matchedCount: number = -1): void {\n\tconst statEl: HTMLElement | null = document.querySelector('.infra-tree__search-stat');\n\tif (!statEl) {\n\t\treturn;\n\t}\n\n\tstatEl.hidden = matchedCount < 0;\n\n\tconst counter: HTMLElement | null = statEl.querySelector('span');\n\tif (counter) {\n\t\tcounter.textContent = String(matchedCount);\n\t}\n}","import React from \"react\";\nimport {InfraTree} from \"./infra-tree/infra-tree\";\nimport './style/index.scss';\nimport {FilterBar} from \"./filter-bar\";\n\nexport function App() {\n\treturn (\n\t\t<>\n\t\t\t<FilterBar/>\n\t\t\t<InfraTree/>\n\t\t</>\n\t);\n}","import React, {StrictMode} from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from \"./components/app\";\n\nReactDOM.render(\n    <StrictMode>\n        <App />\n    </StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}